
AudioSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007be8  08007be8  00008be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d40  08007d40  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d48  08007d48  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000426c  20000060  08007db0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042cc  08007db0  000092cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133c6  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db0  00000000  00000000  0001c454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001f208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6f  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f9d  00000000  00000000  00020e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014dff  00000000  00000000  00049e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc4ab  00000000  00000000  0005ec2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b0d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000470c  00000000  00000000  0015b11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08007bd0 	.word	0x08007bd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08007bd0 	.word	0x08007bd0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <vApplicationGetIdleTaskMemory+0x2c>)
 80005f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <vApplicationGetIdleTaskMemory+0x30>)
 80005f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2280      	movs	r2, #128	@ 0x80
 80005fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000007c 	.word	0x2000007c
 8000610:	200000d0 	.word	0x200000d0

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b0a4      	sub	sp, #144	@ 0x90
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800061a:	f000 faef 	bl	8000bfc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fd52 	bl	80010c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8a9 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f9c9 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 800062a:	f000 f9a9 	bl	8000980 <MX_DMA_Init>
  MX_DAC_Init();
 800062e:	f000 f90d 	bl	800084c <MX_DAC_Init>
  MX_I2C2_Init();
 8000632:	f000 f935 	bl	80008a0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000636:	f000 f973 	bl	8000920 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	4843      	ldr	r0, [pc, #268]	@ (800074c <main+0x138>)
 800063e:	f000 ff4b 	bl	80014d8 <HAL_DAC_Start>
  for (uint8_t addr = 0; addr < 128; addr++) {
 8000642:	2300      	movs	r3, #0
 8000644:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000648:	e026      	b.n	8000698 <main+0x84>
      if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800064a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800064e:	b29b      	uxth	r3, r3
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	b299      	uxth	r1, r3
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2201      	movs	r2, #1
 800065a:	483d      	ldr	r0, [pc, #244]	@ (8000750 <main+0x13c>)
 800065c:	f002 f830 	bl	80026c0 <HAL_I2C_IsDeviceReady>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d113      	bne.n	800068e <main+0x7a>
          char msg[30];
          sprintf(msg, "Device found at 0x%02X\r\n", addr);
 8000666:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4939      	ldr	r1, [pc, #228]	@ (8000754 <main+0x140>)
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fe0e 	bl	8007290 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fde2 	bl	8000240 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	1d39      	adds	r1, r7, #4
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	4834      	ldr	r0, [pc, #208]	@ (8000758 <main+0x144>)
 8000688:	f004 fb42 	bl	8004d10 <HAL_UART_Transmit>
          break;
 800068c:	e008      	b.n	80006a0 <main+0x8c>
  for (uint8_t addr = 0; addr < 128; addr++) {
 800068e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000692:	3301      	adds	r3, #1
 8000694:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000698:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800069c:	2b00      	cmp	r3, #0
 800069e:	dad4      	bge.n	800064a <main+0x36>
      }
  }

  char start_msg[] = "Listening for audio\r\n";
 80006a0:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <main+0x148>)
 80006a2:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006b0:	6020      	str	r0, [r4, #0]
 80006b2:	3404      	adds	r4, #4
 80006b4:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)start_msg, strlen(start_msg), HAL_MAX_DELAY);
 80006b6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdc0 	bl	8000240 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <main+0x144>)
 80006ce:	f004 fb1f 	bl	8004d10 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of decibelMeterTas */
  osThreadDef(decibelMeterTas, decibelMeterHook, osPriorityHigh, 0, 128);
 80006d2:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <main+0x14c>)
 80006d4:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80006d8:	461d      	mov	r5, r3
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  decibelMeterTasHandle = osThreadCreate(osThread(decibelMeterTas), NULL);
 80006e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 fb89 	bl	8005e04 <osThreadCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <main+0x150>)
 80006f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of semaphoreTask */
  osThreadDef(semaphoreTask, semaphoreHook, osPriorityHigh, 0, 128);
 80006f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <main+0x154>)
 80006fa:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  semaphoreTaskHandle = osThreadCreate(osThread(semaphoreTask), NULL);
 800070c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 fb76 	bl	8005e04 <osThreadCreate>
 8000718:	4603      	mov	r3, r0
 800071a:	4a14      	ldr	r2, [pc, #80]	@ (800076c <main+0x158>)
 800071c:	6013      	str	r3, [r2, #0]

  /* definition and creation of speakerTask */
  osThreadDef(speakerTask, speakerHook, osPriorityRealtime, 0, 128);
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <main+0x15c>)
 8000720:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000724:	461d      	mov	r5, r3
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  speakerTaskHandle = osThreadCreate(osThread(speakerTask), NULL);
 8000732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f005 fb63 	bl	8005e04 <osThreadCreate>
 800073e:	4603      	mov	r3, r0
 8000740:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <main+0x160>)
 8000742:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000744:	f005 fb57 	bl	8005df6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <main+0x134>
 800074c:	200002d0 	.word	0x200002d0
 8000750:	20000344 	.word	0x20000344
 8000754:	08007be8 	.word	0x08007be8
 8000758:	20000398 	.word	0x20000398
 800075c:	08007c04 	.word	0x08007c04
 8000760:	08007c2c 	.word	0x08007c2c
 8000764:	20000420 	.word	0x20000420
 8000768:	08007c58 	.word	0x08007c58
 800076c:	20000424 	.word	0x20000424
 8000770:	08007c80 	.word	0x08007c80
 8000774:	20000428 	.word	0x20000428

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	@ 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	@ 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fda2 	bl	80072d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a28      	ldr	r2, [pc, #160]	@ (8000844 <SystemClock_Config+0xcc>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007bc:	4a22      	ldr	r2, [pc, #136]	@ (8000848 <SystemClock_Config+0xd0>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80007ec:	2306      	movs	r3, #6
 80007ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 f97d 	bl	8003afc <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f000 fa24 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000818:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fc14 	bl	8004058 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000836:	f000 fa0d 	bl	8000c54 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_DAC_Init+0x4c>)
 800085c:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <MX_DAC_Init+0x50>)
 800085e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000860:	480d      	ldr	r0, [pc, #52]	@ (8000898 <MX_DAC_Init+0x4c>)
 8000862:	f000 fe17 	bl	8001494 <HAL_DAC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800086c:	f000 f9f2 	bl	8000c54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <MX_DAC_Init+0x4c>)
 8000880:	f000 feab 	bl	80015da <HAL_DAC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800088a:	f000 f9e3 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200002d0 	.word	0x200002d0
 800089c:	40007400 	.word	0x40007400

080008a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C2_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008dc:	f001 fc26 	bl	800212c <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f9b5 	bl	8000c54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_I2C2_Init+0x74>)
 80008ee:	f003 f86d 	bl	80039cc <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f9ac 	bl	8000c54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_I2C2_Init+0x74>)
 8000900:	f003 f8af 	bl	8003a62 <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f9a3 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000344 	.word	0x20000344
 8000918:	40005800 	.word	0x40005800
 800091c:	2000090e 	.word	0x2000090e

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	@ (800097c <MX_USART3_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000964:	f004 f986 	bl	8004c74 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f971 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000398 	.word	0x20000398
 800097c:	40004800 	.word	0x40004800

08000980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_DMA_Init+0x38>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <MX_DMA_Init+0x38>)
 800098c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_DMA_Init+0x38>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2010      	movs	r0, #16
 80009a4:	f000 fcc7 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009a8:	2010      	movs	r0, #16
 80009aa:	f000 fce0 	bl	800136e <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a10      	ldr	r2, [pc, #64]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_GPIO_Init+0x8c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Yellow_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	21e0      	movs	r1, #224	@ 0xe0
 8000a1e:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <MX_GPIO_Init+0x90>)
 8000a20:	f001 fb6a 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Yellow_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Yellow_LED_Pin|Red_LED_Pin;
 8000a24:	23e0      	movs	r3, #224	@ 0xe0
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_GPIO_Init+0x90>)
 8000a3c:	f001 f9b0 	bl	8001da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <decibelMeterHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_decibelMeterHook */
void decibelMeterHook(void const * argument)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b098      	sub	sp, #96	@ 0x60
 8000a54:	af04      	add	r7, sp, #16
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  TickType_t ticks = pdMS_TO_TICKS(400);
 8000a58:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(ticks);
 8000a5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a60:	f005 fc70 	bl	8006344 <vTaskDelay>
	if (HAL_I2C_Mem_Write(&hi2c2, 0x91, 0x0A, I2C_MEMADD_SIZE_8BIT, 0x0A, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	9302      	str	r3, [sp, #8]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	230a      	movs	r3, #10
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	220a      	movs	r2, #10
 8000a76:	2191      	movs	r1, #145	@ 0x91
 8000a78:	4830      	ldr	r0, [pc, #192]	@ (8000b3c <decibelMeterHook+0xec>)
 8000a7a:	f001 fbf3 	bl	8002264 <HAL_I2C_Mem_Write>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d019      	beq.n	8000ab8 <decibelMeterHook+0x68>
	  char error_msg[] = "I2C Mem Write Error\r\n";
 8000a84:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <decibelMeterHook+0xf0>)
 8000a86:	f107 0420 	add.w	r4, r7, #32
 8000a8a:	461d      	mov	r5, r3
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a94:	6020      	str	r0, [r4, #0]
 8000a96:	3404      	adds	r4, #4
 8000a98:	8021      	strh	r1, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fbce 	bl	8000240 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f107 0120 	add.w	r1, r7, #32
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	4824      	ldr	r0, [pc, #144]	@ (8000b44 <decibelMeterHook+0xf4>)
 8000ab2:	f004 f92d 	bl	8004d10 <HAL_UART_Transmit>
	  continue;
 8000ab6:	e040      	b.n	8000b3a <decibelMeterHook+0xea>
	}

	if (HAL_I2C_Mem_Read(&hi2c2, 0x91, 0x0A, I2C_MEMADD_SIZE_8BIT, &decibels, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <decibelMeterHook+0xf8>)
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	220a      	movs	r2, #10
 8000aca:	2191      	movs	r1, #145	@ 0x91
 8000acc:	481b      	ldr	r0, [pc, #108]	@ (8000b3c <decibelMeterHook+0xec>)
 8000ace:	f001 fcdd 	bl	800248c <HAL_I2C_Mem_Read>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d019      	beq.n	8000b0c <decibelMeterHook+0xbc>
	  char error_msg[] = "I2C Mem Read Error\r\n";
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <decibelMeterHook+0xfc>)
 8000ada:	f107 0408 	add.w	r4, r7, #8
 8000ade:	461d      	mov	r5, r3
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ae8:	6020      	str	r0, [r4, #0]
 8000aea:	3404      	adds	r4, #4
 8000aec:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fba4 	bl	8000240 <strlen>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	f107 0108 	add.w	r1, r7, #8
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	480f      	ldr	r0, [pc, #60]	@ (8000b44 <decibelMeterHook+0xf4>)
 8000b06:	f004 f903 	bl	8004d10 <HAL_UART_Transmit>
	  continue;
 8000b0a:	e016      	b.n	8000b3a <decibelMeterHook+0xea>
	}

	char msg[20];
	sprintf(msg, "Sound level: %d dB\r\n", decibels);
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <decibelMeterHook+0xf8>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b16:	490e      	ldr	r1, [pc, #56]	@ (8000b50 <decibelMeterHook+0x100>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 fbb9 	bl	8007290 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb8c 	bl	8000240 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <decibelMeterHook+0xf4>)
 8000b36:	f004 f8eb 	bl	8004d10 <HAL_UART_Transmit>
  {
 8000b3a:	e790      	b.n	8000a5e <decibelMeterHook+0xe>
 8000b3c:	20000344 	.word	0x20000344
 8000b40:	08007cb4 	.word	0x08007cb4
 8000b44:	20000398 	.word	0x20000398
 8000b48:	2000042c 	.word	0x2000042c
 8000b4c:	08007ccc 	.word	0x08007ccc
 8000b50:	08007c9c 	.word	0x08007c9c

08000b54 <semaphoreHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_semaphoreHook */
void semaphoreHook(void const * argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN semaphoreHook */
  TickType_t ticks = pdMS_TO_TICKS(2);
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin | Red_LED_Pin | Yellow_LED_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	21e0      	movs	r1, #224	@ 0xe0
 8000b64:	480f      	ldr	r0, [pc, #60]	@ (8000ba4 <semaphoreHook+0x50>)
 8000b66:	f001 fac7 	bl	80020f8 <HAL_GPIO_WritePin>
	  if (decibels >= threshold_worst) {
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <semaphoreHook+0x54>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b59      	cmp	r3, #89	@ 0x59
 8000b70:	d905      	bls.n	8000b7e <semaphoreHook+0x2a>
		  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <semaphoreHook+0x50>)
 8000b78:	f001 fabe 	bl	80020f8 <HAL_GPIO_WritePin>
 8000b7c:	e00e      	b.n	8000b9c <semaphoreHook+0x48>
	  } else if (decibels >= threshold_bad) {
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <semaphoreHook+0x54>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b4f      	cmp	r3, #79	@ 0x4f
 8000b84:	d905      	bls.n	8000b92 <semaphoreHook+0x3e>
		  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2140      	movs	r1, #64	@ 0x40
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <semaphoreHook+0x50>)
 8000b8c:	f001 fab4 	bl	80020f8 <HAL_GPIO_WritePin>
 8000b90:	e004      	b.n	8000b9c <semaphoreHook+0x48>
	  } else {
		  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2120      	movs	r1, #32
 8000b96:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <semaphoreHook+0x50>)
 8000b98:	f001 faae 	bl	80020f8 <HAL_GPIO_WritePin>
	  }


	  vTaskDelay(ticks);
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f005 fbd1 	bl	8006344 <vTaskDelay>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin | Red_LED_Pin | Yellow_LED_Pin, GPIO_PIN_RESET);
 8000ba2:	e7dd      	b.n	8000b60 <semaphoreHook+0xc>
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	2000042c 	.word	0x2000042c

08000bac <speakerHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speakerHook */
void speakerHook(void const * argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speakerHook */
  TickType_t ticks = pdMS_TO_TICKS(1);
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
  TickType_t wait = pdMS_TO_TICKS(100);
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;) {
      if (decibels >= threshold_worst) {
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <speakerHook+0x48>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b59      	cmp	r3, #89	@ 0x59
 8000bc2:	d912      	bls.n	8000bea <speakerHook+0x3e>
          HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480b      	ldr	r0, [pc, #44]	@ (8000bf8 <speakerHook+0x4c>)
 8000bcc:	f000 fcdb 	bl	8001586 <HAL_DAC_SetValue>
          vTaskDelay(ticks);
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f005 fbb7 	bl	8006344 <vTaskDelay>
          HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) 50);
 8000bd6:	2332      	movs	r3, #50	@ 0x32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <speakerHook+0x4c>)
 8000bde:	f000 fcd2 	bl	8001586 <HAL_DAC_SetValue>
          vTaskDelay(ticks);
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f005 fbae 	bl	8006344 <vTaskDelay>
 8000be8:	e7e8      	b.n	8000bbc <speakerHook+0x10>
      } else {
    	  vTaskDelay(wait);
 8000bea:	68b8      	ldr	r0, [r7, #8]
 8000bec:	f005 fbaa 	bl	8006344 <vTaskDelay>
      if (decibels >= threshold_worst) {
 8000bf0:	e7e4      	b.n	8000bbc <speakerHook+0x10>
 8000bf2:	bf00      	nop
 8000bf4:	2000042c 	.word	0x2000042c
 8000bf8:	200002d0 	.word	0x200002d0

08000bfc <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c02:	463b      	mov	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c0e:	f000 fbc9 	bl	80013a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c1e:	231f      	movs	r3, #31
 8000c20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c22:	2387      	movs	r3, #135	@ 0x87
 8000c24:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fbe7 	bl	8001414 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c46:	2004      	movs	r0, #4
 8000c48:	f000 fbc4 	bl	80013d4 <HAL_MPU_Enable>

}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <Error_Handler+0x8>

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fb4a 	bl	8001336 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d84 <HAL_DAC_MspInit+0xd4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d154      	bne.n	8000d7c <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000cd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a26      	ldr	r2, [pc, #152]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <HAL_DAC_MspInit+0xd8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d02:	2310      	movs	r3, #16
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	481d      	ldr	r0, [pc, #116]	@ (8000d8c <HAL_DAC_MspInit+0xdc>)
 8000d16:	f001 f843 	bl	8001da0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <HAL_DAC_MspInit+0xe4>)
 8000d1e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d22:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d2a:	2240      	movs	r2, #64	@ 0x40
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d62:	f000 fc93 	bl	800168c <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000d6c:	f7ff ff72 	bl	8000c54 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_DAC_MspInit+0xe0>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40007400 	.word	0x40007400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	200002e4 	.word	0x200002e4
 8000d94:	40026088 	.word	0x40026088

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0ae      	sub	sp, #184	@ 0xb8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2290      	movs	r2, #144	@ 0x90
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fa89 	bl	80072d0 <memset>
  if(hi2c->Instance==I2C2)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a29      	ldr	r2, [pc, #164]	@ (8000e68 <HAL_I2C_MspInit+0xd0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d14b      	bne.n	8000e60 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fb24 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000de2:	f7ff ff37 	bl	8000c54 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de6:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <HAL_I2C_MspInit+0xd4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a20      	ldr	r2, [pc, #128]	@ (8000e6c <HAL_I2C_MspInit+0xd4>)
 8000dec:	f043 0320 	orr.w	r3, r3, #32
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e6c <HAL_I2C_MspInit+0xd4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e16:	2304      	movs	r3, #4
 8000e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <HAL_I2C_MspInit+0xd8>)
 8000e24:	f000 ffbc 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e28:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_I2C_MspInit+0xd4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <HAL_I2C_MspInit+0xd4>)
 8000e2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e34:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <HAL_I2C_MspInit+0xd4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2105      	movs	r1, #5
 8000e44:	2021      	movs	r0, #33	@ 0x21
 8000e46:	f000 fa76 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e4a:	2021      	movs	r0, #33	@ 0x21
 8000e4c:	f000 fa8f 	bl	800136e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2105      	movs	r1, #5
 8000e54:	2022      	movs	r0, #34	@ 0x22
 8000e56:	f000 fa6e 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e5a:	2022      	movs	r0, #34	@ 0x22
 8000e5c:	f000 fa87 	bl	800136e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e60:	bf00      	nop
 8000e62:	37b8      	adds	r7, #184	@ 0xb8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40005800 	.word	0x40005800
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40021400 	.word	0x40021400

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0ae      	sub	sp, #184	@ 0xb8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2290      	movs	r2, #144	@ 0x90
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fa1b 	bl	80072d0 <memset>
  if(huart->Instance==USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a26      	ldr	r2, [pc, #152]	@ (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d144      	bne.n	8000f2e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fab6 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff fec9 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <HAL_UART_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f16:	4619      	mov	r1, r3
 8000f18:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <HAL_UART_MspInit+0xcc>)
 8000f1a:	f000 ff41 	bl	8001da0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2105      	movs	r1, #5
 8000f22:	2027      	movs	r0, #39	@ 0x27
 8000f24:	f000 fa07 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f28:	2027      	movs	r0, #39	@ 0x27
 8000f2a:	f000 fa20 	bl	800136e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	37b8      	adds	r7, #184	@ 0xb8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7e:	f000 f8df 	bl	8001140 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f82:	f005 fd1d 	bl	80069c0 <xTaskGetSchedulerState>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d001      	beq.n	8000f90 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f8c:	f005 ff44 	bl	8006e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Stream5_IRQHandler+0x10>)
 8000f9a:	f000 fcb7 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200002e4 	.word	0x200002e4

08000fa8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <I2C2_EV_IRQHandler+0x10>)
 8000fae:	f001 fc73 	bl	8002898 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000344 	.word	0x20000344

08000fbc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <I2C2_ER_IRQHandler+0x10>)
 8000fc2:	f001 fc83 	bl	80028cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000344 	.word	0x20000344

08000fd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <USART3_IRQHandler+0x10>)
 8000fd6:	f003 ff25 	bl	8004e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000398 	.word	0x20000398

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f006 f964 	bl	80072e0 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20080000 	.word	0x20080000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000430 	.word	0x20000430
 800104c:	200042d0 	.word	0x200042d0

08001050 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ac <LoopFillZerobss+0xe>
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x12>)
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x16>)
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x1a>)
 8001082:	2300      	movs	r3, #0
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:
 8001086:	58d4      	ldr	r4, [r2, r3]
 8001088:	50c4      	str	r4, [r0, r3]
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:
 800108c:	18c4      	adds	r4, r0, r3
 800108e:	428c      	cmp	r4, r1
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopFillZerobss+0x1e>)
 8001094:	4c0a      	ldr	r4, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x22>)
 8001096:	2300      	movs	r3, #0
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:
 800109e:	42a2      	cmp	r2, r4
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>
 80010a2:	f006 f923 	bl	80072ec <__libc_init_array>
 80010a6:	f7ff fab5 	bl	8000614 <main>
 80010aa:	4770      	bx	lr
 80010ac:	20080000 	.word	0x20080000
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000060 	.word	0x20000060
 80010b8:	08007d50 	.word	0x08007d50
 80010bc:	20000060 	.word	0x20000060
 80010c0:	200042cc 	.word	0x200042cc

080010c4 <ADC_IRQHandler>:
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>

080010c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f000 f928 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d0:	200f      	movs	r0, #15
 80010d2:	f000 f805 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d6:	f7ff fdc3 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f943 	bl	800138a <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f90b 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	20000434 	.word	0x20000434

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000434 	.word	0x20000434

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	05fa0000 	.word	0x05fa0000

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	@ (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff3e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff31 	bl	80011e4 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013a8:	f3bf 8f5f 	dmb	sy
}
 80013ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_MPU_Disable+0x28>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_MPU_Disable+0x28>)
 80013b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013b8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013ba:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_MPU_Disable+0x2c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	e000ed90 	.word	0xe000ed90

080013d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_MPU_Enable+0x38>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_MPU_Enable+0x3c>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <HAL_MPU_Enable+0x3c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013f2:	f3bf 8f4f 	dsb	sy
}
 80013f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f8:	f3bf 8f6f 	isb	sy
}
 80013fc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed90 	.word	0xe000ed90
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	785a      	ldrb	r2, [r3, #1]
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_MPU_ConfigRegion+0x7c>)
 8001422:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_MPU_ConfigRegion+0x7c>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a19      	ldr	r2, [pc, #100]	@ (8001490 <HAL_MPU_ConfigRegion+0x7c>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001430:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_MPU_ConfigRegion+0x7c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b1b      	ldrb	r3, [r3, #12]
 800143c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7adb      	ldrb	r3, [r3, #11]
 8001442:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001444:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7a9b      	ldrb	r3, [r3, #10]
 800144a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800144c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7b5b      	ldrb	r3, [r3, #13]
 8001452:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001454:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b9b      	ldrb	r3, [r3, #14]
 800145a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800145c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7bdb      	ldrb	r3, [r3, #15]
 8001462:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001464:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7a5b      	ldrb	r3, [r3, #9]
 800146a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800146c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7a1b      	ldrb	r3, [r3, #8]
 8001472:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001474:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800147e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001480:	6113      	str	r3, [r2, #16]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed90 	.word	0xe000ed90

08001494 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e014      	b.n	80014d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	791b      	ldrb	r3, [r3, #4]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fbfa 	bl	8000cb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e046      	b.n	800157a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	795b      	ldrb	r3, [r3, #5]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_DAC_Start+0x20>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e040      	b.n	800157a <HAL_DAC_Start+0xa2>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2202      	movs	r2, #2
 8001502:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2201      	movs	r2, #1
 8001512:	409a      	lsls	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800152c:	2b3c      	cmp	r3, #60	@ 0x3c
 800152e:	d11d      	bne.n	800156c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	e014      	b.n	800156c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	213c      	movs	r1, #60	@ 0x3c
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	429a      	cmp	r2, r3
 800155a:	d107      	bne.n	800156c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0202 	orr.w	r2, r2, #2
 800156a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001586:	b480      	push	{r7}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e015      	b.n	80015ce <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d105      	bne.n	80015ba <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	3308      	adds	r3, #8
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e004      	b.n	80015c4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	3314      	adds	r3, #20
 80015c2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	461a      	mov	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015da:	b480      	push	{r7}
 80015dc:	b089      	sub	sp, #36	@ 0x24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <HAL_DAC_ConfigChannel+0x1c>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e042      	b.n	8001680 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_DAC_ConfigChannel+0x2c>
 8001602:	2302      	movs	r3, #2
 8001604:	e03c      	b.n	8001680 <HAL_DAC_ConfigChannel+0xa6>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2202      	movs	r2, #2
 8001610:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	22c0      	movs	r2, #192	@ 0xc0
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800167e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3724      	adds	r7, #36	@ 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff fd66 	bl	8001168 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e099      	b.n	80017dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	e00f      	b.n	80016ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fd4d 	bl	8001168 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d908      	bls.n	80016ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2220      	movs	r2, #32
 80016dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e078      	b.n	80017dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e8      	bne.n	80016ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <HAL_DMA_Init+0x158>)
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	2b04      	cmp	r3, #4
 8001742:	d107      	bne.n	8001754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174c:	4313      	orrs	r3, r2
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f023 0307 	bic.w	r3, r3, #7
 800176a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	2b04      	cmp	r3, #4
 800177c:	d117      	bne.n	80017ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fa89 	bl	8001ca8 <DMA_CheckFifoParam>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2240      	movs	r2, #64	@ 0x40
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017aa:	2301      	movs	r3, #1
 80017ac:	e016      	b.n	80017dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fa40 	bl	8001c3c <DMA_CalcBaseAndBitshift>
 80017bc:	4603      	mov	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c4:	223f      	movs	r2, #63	@ 0x3f
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	e010803f 	.word	0xe010803f

080017e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017f6:	f7ff fcb7 	bl	8001168 <HAL_GetTick>
 80017fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d008      	beq.n	800181a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2280      	movs	r2, #128	@ 0x80
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e052      	b.n	80018c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0216 	bic.w	r2, r2, #22
 8001828:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001838:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HAL_DMA_Abort+0x62>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0208 	bic.w	r2, r2, #8
 8001858:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186a:	e013      	b.n	8001894 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186c:	f7ff fc7c 	bl	8001168 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b05      	cmp	r3, #5
 8001878:	d90c      	bls.n	8001894 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e015      	b.n	80018c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1e4      	bne.n	800186c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	223f      	movs	r2, #63	@ 0x3f
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d004      	beq.n	80018e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00c      	b.n	8001900 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2205      	movs	r2, #5
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001918:	4b8e      	ldr	r3, [pc, #568]	@ (8001b54 <HAL_DMA_IRQHandler+0x248>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a8e      	ldr	r2, [pc, #568]	@ (8001b58 <HAL_DMA_IRQHandler+0x24c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0a9b      	lsrs	r3, r3, #10
 8001924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	2208      	movs	r2, #8
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01a      	beq.n	8001978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001964:	2208      	movs	r2, #8
 8001966:	409a      	lsls	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197c:	2201      	movs	r2, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199a:	2201      	movs	r2, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b2:	2204      	movs	r2, #4
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d012      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00b      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	2204      	movs	r2, #4
 80019d2:	409a      	lsls	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019dc:	f043 0204 	orr.w	r2, r3, #4
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e8:	2210      	movs	r2, #16
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d043      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03c      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a06:	2210      	movs	r2, #16
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
 8001a3a:	e01f      	b.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
 8001a4c:	e016      	b.n	8001a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0208 	bic.w	r2, r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a80:	2220      	movs	r2, #32
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 808f 	beq.w	8001bac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8087 	beq.w	8001bac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d136      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0216 	bic.w	r2, r2, #22
 8001ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0x1da>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0208 	bic.w	r2, r2, #8
 8001af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	223f      	movs	r2, #63	@ 0x3f
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d07e      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
        }
        return;
 8001b22:	e079      	b.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01d      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10d      	bne.n	8001b5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d031      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	e02c      	b.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d023      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	e01e      	b.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10f      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0210 	bic.w	r2, r2, #16
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d032      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d022      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d307      	bcc.n	8001bf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f2      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x2cc>
 8001bf2:	e000      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
 8001c16:	e000      	b.n	8001c1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c18:	bf00      	nop
    }
  }
}
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c2e:	b2db      	uxtb	r3, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	3b10      	subs	r3, #16
 8001c4c:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <DMA_CalcBaseAndBitshift+0x60>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d908      	bls.n	8001c7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	1d1a      	adds	r2, r3, #4
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c7a:	e006      	b.n	8001c8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ca0:	08007d04 	.word	0x08007d04
 8001ca4:	fffffc00 	.word	0xfffffc00

08001ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11f      	bne.n	8001d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d856      	bhi.n	8001d76 <DMA_CheckFifoParam+0xce>
 8001cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd0 <DMA_CheckFifoParam+0x28>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001cf3 	.word	0x08001cf3
 8001cd8:	08001ce1 	.word	0x08001ce1
 8001cdc:	08001d77 	.word	0x08001d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d046      	beq.n	8001d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf0:	e043      	b.n	8001d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cfa:	d140      	bne.n	8001d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d00:	e03d      	b.n	8001d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d0a:	d121      	bne.n	8001d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d837      	bhi.n	8001d82 <DMA_CheckFifoParam+0xda>
 8001d12:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <DMA_CheckFifoParam+0x70>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d2f 	.word	0x08001d2f
 8001d20:	08001d29 	.word	0x08001d29
 8001d24:	08001d41 	.word	0x08001d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2c:	e030      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d025      	beq.n	8001d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d3e:	e022      	b.n	8001d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d48:	d11f      	bne.n	8001d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d4e:	e01c      	b.n	8001d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d903      	bls.n	8001d5e <DMA_CheckFifoParam+0xb6>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d003      	beq.n	8001d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d5c:	e018      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      break;
 8001d62:	e015      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      break;
 8001d74:	e00b      	b.n	8001d8e <DMA_CheckFifoParam+0xe6>
      break;
 8001d76:	bf00      	nop
 8001d78:	e00a      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7a:	bf00      	nop
 8001d7c:	e008      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7e:	bf00      	nop
 8001d80:	e006      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d82:	bf00      	nop
 8001d84:	e004      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d86:	bf00      	nop
 8001d88:	e002      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d8a:	bf00      	nop
 8001d8c:	e000      	b.n	8001d90 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e175      	b.n	80020ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8164 	bne.w	80020a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x56>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80be 	beq.w	80020a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	4b66      	ldr	r3, [pc, #408]	@ (80020c4 <HAL_GPIO_Init+0x324>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	4a65      	ldr	r2, [pc, #404]	@ (80020c4 <HAL_GPIO_Init+0x324>)
 8001f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f36:	4b63      	ldr	r3, [pc, #396]	@ (80020c4 <HAL_GPIO_Init+0x324>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f42:	4a61      	ldr	r2, [pc, #388]	@ (80020c8 <HAL_GPIO_Init+0x328>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a58      	ldr	r2, [pc, #352]	@ (80020cc <HAL_GPIO_Init+0x32c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d037      	beq.n	8001fde <HAL_GPIO_Init+0x23e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a57      	ldr	r2, [pc, #348]	@ (80020d0 <HAL_GPIO_Init+0x330>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d031      	beq.n	8001fda <HAL_GPIO_Init+0x23a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a56      	ldr	r2, [pc, #344]	@ (80020d4 <HAL_GPIO_Init+0x334>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x236>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a55      	ldr	r2, [pc, #340]	@ (80020d8 <HAL_GPIO_Init+0x338>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x232>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a54      	ldr	r2, [pc, #336]	@ (80020dc <HAL_GPIO_Init+0x33c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x22e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a53      	ldr	r2, [pc, #332]	@ (80020e0 <HAL_GPIO_Init+0x340>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x22a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a52      	ldr	r2, [pc, #328]	@ (80020e4 <HAL_GPIO_Init+0x344>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x226>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a51      	ldr	r2, [pc, #324]	@ (80020e8 <HAL_GPIO_Init+0x348>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x222>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a50      	ldr	r2, [pc, #320]	@ (80020ec <HAL_GPIO_Init+0x34c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x21e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80020f0 <HAL_GPIO_Init+0x350>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x21a>
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	e012      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fba:	230a      	movs	r3, #10
 8001fbc:	e010      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e00e      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e00c      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e00a      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fca:	2305      	movs	r3, #5
 8001fcc:	e008      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e004      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_GPIO_Init+0x240>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	f002 0203 	and.w	r2, r2, #3
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	4093      	lsls	r3, r2
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ff0:	4935      	ldr	r1, [pc, #212]	@ (80020c8 <HAL_GPIO_Init+0x328>)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002022:	4a34      	ldr	r2, [pc, #208]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800204c:	4a29      	ldr	r2, [pc, #164]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002052:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002076:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <HAL_GPIO_Init+0x354>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f67f ae86 	bls.w	8001dc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3724      	adds	r7, #36	@ 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40013800 	.word	0x40013800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40021c00 	.word	0x40021c00
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022400 	.word	0x40022400
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e08b      	b.n	8002256 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fe20 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	@ 0x24
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800217c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800218c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e006      	b.n	80021b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d108      	bne.n	80021ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	e007      	b.n	80021de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <HAL_I2C_Init+0x134>)
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69d9      	ldr	r1, [r3, #28]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	02008000 	.word	0x02008000

08002264 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	817b      	strh	r3, [r7, #10]
 8002276:	460b      	mov	r3, r1
 8002278:	813b      	strh	r3, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 80f9 	bne.w	800247e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_I2C_Mem_Write+0x34>
 8002292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0ed      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Mem_Write+0x4e>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e0e6      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ba:	f7fe ff55 	bl	8001168 <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2319      	movs	r3, #25
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f001 f92a 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0d1      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2221      	movs	r2, #33	@ 0x21
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2240      	movs	r2, #64	@ 0x40
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002304:	88f8      	ldrh	r0, [r7, #6]
 8002306:	893a      	ldrh	r2, [r7, #8]
 8002308:	8979      	ldrh	r1, [r7, #10]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	4603      	mov	r3, r0
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fc6d 	bl	8002bf4 <I2C_RequestMemoryWrite>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0a9      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	2bff      	cmp	r3, #255	@ 0xff
 8002334:	d90e      	bls.n	8002354 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	22ff      	movs	r2, #255	@ 0xff
 800233a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	b2da      	uxtb	r2, r3
 8002342:	8979      	ldrh	r1, [r7, #10]
 8002344:	2300      	movs	r3, #0
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f001 faad 	bl	80038ac <I2C_TransferConfig>
 8002352:	e00f      	b.n	8002374 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	b2da      	uxtb	r2, r3
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	2300      	movs	r3, #0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f001 fa9c 	bl	80038ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f001 f92d 	bl	80035d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e07b      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d034      	beq.n	800242c <HAL_I2C_Mem_Write+0x1c8>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d130      	bne.n	800242c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f001 f8a6 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e04d      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2bff      	cmp	r3, #255	@ 0xff
 80023ec:	d90e      	bls.n	800240c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	22ff      	movs	r2, #255	@ 0xff
 80023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	8979      	ldrh	r1, [r7, #10]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f001 fa51 	bl	80038ac <I2C_TransferConfig>
 800240a:	e00f      	b.n	800242c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	b2da      	uxtb	r2, r3
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f001 fa40 	bl	80038ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d19e      	bne.n	8002374 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f001 f913 	bl	8003666 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e01a      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_I2C_Mem_Write+0x224>)
 800245e:	400b      	ands	r3, r1
 8002460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	fe00e800 	.word	0xfe00e800

0800248c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	817b      	strh	r3, [r7, #10]
 800249e:	460b      	mov	r3, r1
 80024a0:	813b      	strh	r3, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f040 80fd 	bne.w	80026ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x34>
 80024ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0f1      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_I2C_Mem_Read+0x4e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0ea      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024e2:	f7fe fe41 	bl	8001168 <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2319      	movs	r3, #25
 80024ee:	2201      	movs	r2, #1
 80024f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f001 f816 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d5      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2222      	movs	r2, #34	@ 0x22
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002524:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800252c:	88f8      	ldrh	r0, [r7, #6]
 800252e:	893a      	ldrh	r2, [r7, #8]
 8002530:	8979      	ldrh	r1, [r7, #10]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fbad 	bl	8002c9c <I2C_RequestMemoryRead>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0ad      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2bff      	cmp	r3, #255	@ 0xff
 800255c:	d90e      	bls.n	800257c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	b2da      	uxtb	r2, r3
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	4b52      	ldr	r3, [pc, #328]	@ (80026b8 <HAL_I2C_Mem_Read+0x22c>)
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f001 f999 	bl	80038ac <I2C_TransferConfig>
 800257a:	e00f      	b.n	800259c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	b2da      	uxtb	r2, r3
 800258c:	8979      	ldrh	r1, [r7, #10]
 800258e:	4b4a      	ldr	r3, [pc, #296]	@ (80026b8 <HAL_I2C_Mem_Read+0x22c>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f001 f988 	bl	80038ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	2200      	movs	r2, #0
 80025a4:	2104      	movs	r1, #4
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 ffbd 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07c      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d034      	beq.n	800265c <HAL_I2C_Mem_Read+0x1d0>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d130      	bne.n	800265c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 ff8e 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e04d      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2bff      	cmp	r3, #255	@ 0xff
 800261c:	d90e      	bls.n	800263c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	b2da      	uxtb	r2, r3
 800262a:	8979      	ldrh	r1, [r7, #10]
 800262c:	2300      	movs	r3, #0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f001 f939 	bl	80038ac <I2C_TransferConfig>
 800263a:	e00f      	b.n	800265c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264a:	b2da      	uxtb	r2, r3
 800264c:	8979      	ldrh	r1, [r7, #10]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f001 f928 	bl	80038ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d19a      	bne.n	800259c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fffb 	bl	8003666 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e01a      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2220      	movs	r2, #32
 8002680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_I2C_Mem_Read+0x230>)
 800268e:	400b      	ands	r3, r1
 8002690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	80002400 	.word	0x80002400
 80026bc:	fe00e800 	.word	0xfe00e800

080026c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	f040 80d2 	bne.w	8002886 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f0:	d101      	bne.n	80026f6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0c8      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_IsDeviceReady+0x44>
 8002700:	2302      	movs	r3, #2
 8002702:	e0c1      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2224      	movs	r2, #36	@ 0x24
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_I2C_IsDeviceReady+0x6e>
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002728:	4b59      	ldr	r3, [pc, #356]	@ (8002890 <HAL_I2C_IsDeviceReady+0x1d0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	e004      	b.n	8002738 <HAL_I2C_IsDeviceReady+0x78>
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002734:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_I2C_IsDeviceReady+0x1d4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fd13 	bl	8001168 <HAL_GetTick>
 8002742:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b20      	cmp	r3, #32
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002770:	e034      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d01a      	beq.n	80027b0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe fcf5 	bl	8001168 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <HAL_I2C_IsDeviceReady+0xd0>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10f      	bne.n	80027b0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e06b      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_I2C_IsDeviceReady+0x128>
 80027e2:	7fbb      	ldrb	r3, [r7, #30]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0c4      	beq.n	8002772 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d01a      	beq.n	800282c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2120      	movs	r1, #32
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fe90 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e03b      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e02d      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	2120      	movs	r1, #32
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fe75 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e020      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2220      	movs	r2, #32
 8002854:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	f63f af5a 	bhi.w	800271a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	02002000 	.word	0x02002000
 8002894:	02002800 	.word	0x02002800

08002898 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
  }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00f      	beq.n	800290e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800290c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00f      	beq.n	8002938 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f043 0208 	orr.w	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002936:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00f      	beq.n	8002962 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f043 0202 	orr.w	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002960:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 030b 	and.w	r3, r3, #11
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fc7d 	bl	8003274 <I2C_ITError>
  }
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
 80029b6:	4613      	mov	r3, r2
 80029b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <I2C_Slave_ISR_IT+0x24>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0e2      	b.n	8002bec <I2C_Slave_ISR_IT+0x1ea>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a42:	6939      	ldr	r1, [r7, #16]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fa5d 	bl	8002f04 <I2C_ITSlaveCplt>
 8002a4a:	e0ca      	b.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04b      	beq.n	8002aee <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d046      	beq.n	8002aee <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d128      	bne.n	8002abc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b28      	cmp	r3, #40	@ 0x28
 8002a74:	d108      	bne.n	8002a88 <I2C_Slave_ISR_IT+0x86>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a7c:	d104      	bne.n	8002a88 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a7e:	6939      	ldr	r1, [r7, #16]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fba3 	bl	80031cc <I2C_ITListenCplt>
 8002a86:	e031      	b.n	8002aec <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b29      	cmp	r3, #41	@ 0x29
 8002a92:	d10e      	bne.n	8002ab2 <I2C_Slave_ISR_IT+0xb0>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a9a:	d00a      	beq.n	8002ab2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fcfc 	bl	80034a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f9ce 	bl	8002e4c <I2C_ITSlaveSeqCplt>
 8002ab0:	e01c      	b.n	8002aec <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002aba:	e08f      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <I2C_Slave_ISR_IT+0xdc>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002adc:	d17e      	bne.n	8002bdc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fbc5 	bl	8003274 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002aea:	e077      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1da>
 8002aec:	e076      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02f      	beq.n	8002b58 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02a      	beq.n	8002b58 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d018      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d14b      	bne.n	8002be0 <I2C_Slave_ISR_IT+0x1de>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b4e:	d047      	beq.n	8002be0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f97b 	bl	8002e4c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b56:	e043      	b.n	8002be0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b6c:	6939      	ldr	r1, [r7, #16]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f8e8 	bl	8002d44 <I2C_ITAddrCplt>
 8002b74:	e035      	b.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d030      	beq.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02b      	beq.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d018      	beq.n	8002bc6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bc4:	e00d      	b.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bcc:	d002      	beq.n	8002bd4 <I2C_Slave_ISR_IT+0x1d2>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f939 	bl	8002e4c <I2C_ITSlaveSeqCplt>
 8002bda:	e002      	b.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002be0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	460b      	mov	r3, r1
 8002c08:	813b      	strh	r3, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <I2C_RequestMemoryWrite+0xa4>)
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fe45 	bl	80038ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	69b9      	ldr	r1, [r7, #24]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fcd6 	bl	80035d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e02c      	b.n	8002c90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c3c:	893b      	ldrh	r3, [r7, #8]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c46:	e015      	b.n	8002c74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fcbc 	bl	80035d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e012      	b.n	8002c90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6a:	893b      	ldrh	r3, [r7, #8]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	@ 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fc51 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	80002000 	.word	0x80002000

08002c9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <I2C_RequestMemoryRead+0xa4>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fdf2 	bl	80038ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fc83 	bl	80035d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e02c      	b.n	8002d36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce2:	893b      	ldrh	r3, [r7, #8]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cec:	e015      	b.n	8002d1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fc69 	bl	80035d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e012      	b.n	8002d36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2200      	movs	r2, #0
 8002d22:	2140      	movs	r1, #64	@ 0x40
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fbfe 	bl	8003526 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	80002000 	.word	0x80002000

08002d44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d5a:	2b28      	cmp	r3, #40	@ 0x28
 8002d5c:	d16a      	bne.n	8002e34 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	0c1b      	lsrs	r3, r3, #16
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d138      	bne.n	8002e14 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	09db      	lsrs	r3, r3, #7
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	89bb      	ldrh	r3, [r7, #12]
 8002daa:	4053      	eors	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f003 0306 	and.w	r3, r3, #6
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11c      	bne.n	8002df0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d13b      	bne.n	8002e44 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002de2:	89ba      	ldrh	r2, [r7, #12]
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff fdde 	bl	80029aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dee:	e029      	b.n	8002e44 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002df4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fd89 	bl	8003910 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e06:	89ba      	ldrh	r2, [r7, #12]
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fdcc 	bl	80029aa <HAL_I2C_AddrCallback>
}
 8002e12:	e017      	b.n	8002e44 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fd79 	bl	8003910 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e26:	89ba      	ldrh	r2, [r7, #12]
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fdbc 	bl	80029aa <HAL_I2C_AddrCallback>
}
 8002e32:	e007      	b.n	8002e44 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e00c      	b.n	8002e9a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b29      	cmp	r3, #41	@ 0x29
 8002ea4:	d112      	bne.n	8002ecc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2228      	movs	r2, #40	@ 0x28
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2221      	movs	r2, #33	@ 0x21
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fd2a 	bl	8003910 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fd5c 	bl	8002982 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002eca:	e017      	b.n	8002efc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ed6:	d111      	bne.n	8002efc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2228      	movs	r2, #40	@ 0x28
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2222      	movs	r2, #34	@ 0x22
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fd11 	bl	8003910 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fd4d 	bl	8002996 <HAL_I2C_SlaveRxCpltCallback>
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f26:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	2b21      	cmp	r3, #33	@ 0x21
 8002f34:	d002      	beq.n	8002f3c <I2C_ITSlaveCplt+0x38>
 8002f36:	7afb      	ldrb	r3, [r7, #11]
 8002f38:	2b29      	cmp	r3, #41	@ 0x29
 8002f3a:	d108      	bne.n	8002f4e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f3c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fce5 	bl	8003910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2221      	movs	r2, #33	@ 0x21
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f4c:	e019      	b.n	8002f82 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	2b22      	cmp	r3, #34	@ 0x22
 8002f52:	d002      	beq.n	8002f5a <I2C_ITSlaveCplt+0x56>
 8002f54:	7afb      	ldrb	r3, [r7, #11]
 8002f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f58:	d108      	bne.n	8002f6c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f5a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fcd6 	bl	8003910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2222      	movs	r2, #34	@ 0x22
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f6a:	e00a      	b.n	8002f82 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	2b28      	cmp	r3, #40	@ 0x28
 8002f70:	d107      	bne.n	8002f82 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002f72:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fcca 	bl	8003910 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f90:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b89      	ldr	r3, [pc, #548]	@ (80031c4 <I2C_ITSlaveCplt+0x2c0>)
 8002f9e:	400b      	ands	r3, r1
 8002fa0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa7d 	bl	80034a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d013      	beq.n	8002fda <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01f      	beq.n	800300a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fd8:	e017      	b.n	800300a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0304 	bic.w	r3, r3, #4
 800301a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d049      	beq.n	800310a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800307c:	2b00      	cmp	r3, #0
 800307e:	d044      	beq.n	800310a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d128      	bne.n	80030dc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b28      	cmp	r3, #40	@ 0x28
 8003094:	d108      	bne.n	80030a8 <I2C_ITSlaveCplt+0x1a4>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800309c:	d104      	bne.n	80030a8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f893 	bl	80031cc <I2C_ITListenCplt>
 80030a6:	e030      	b.n	800310a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b29      	cmp	r3, #41	@ 0x29
 80030b2:	d10e      	bne.n	80030d2 <I2C_ITSlaveCplt+0x1ce>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030ba:	d00a      	beq.n	80030d2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f9ec 	bl	80034a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff febe 	bl	8002e4c <I2C_ITSlaveSeqCplt>
 80030d0:	e01b      	b.n	800310a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2210      	movs	r2, #16
 80030d8:	61da      	str	r2, [r3, #28]
 80030da:	e016      	b.n	800310a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <I2C_ITSlaveCplt+0x1fa>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030fc:	d105      	bne.n	800310a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f8b5 	bl	8003274 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8a4 	bl	8003274 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b28      	cmp	r3, #40	@ 0x28
 8003136:	d141      	bne.n	80031bc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f846 	bl	80031cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003140:	e03c      	b.n	80031bc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800314a:	d014      	beq.n	8003176 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fe7d 	bl	8002e4c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <I2C_ITSlaveCplt+0x2c4>)
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fc29 	bl	80029c6 <HAL_I2C_ListenCpltCallback>
}
 8003174:	e022      	b.n	80031bc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b22      	cmp	r3, #34	@ 0x22
 8003180:	d10e      	bne.n	80031a0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fbfc 	bl	8002996 <HAL_I2C_SlaveRxCpltCallback>
}
 800319e:	e00d      	b.n	80031bc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fbe3 	bl	8002982 <HAL_I2C_SlaveTxCpltCallback>
}
 80031bc:	bf00      	nop
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	fe00e800 	.word	0xfe00e800
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a25      	ldr	r2, [pc, #148]	@ (8003270 <I2C_ITListenCplt+0xa4>)
 80031da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d022      	beq.n	8003248 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003240:	f043 0204 	orr.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003248:	f248 0103 	movw	r1, #32771	@ 0x8003
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fb5f 	bl	8003910 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2210      	movs	r2, #16
 8003258:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fbaf 	bl	80029c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003284:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a6d      	ldr	r2, [pc, #436]	@ (8003448 <I2C_ITError+0x1d4>)
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b28      	cmp	r3, #40	@ 0x28
 80032aa:	d005      	beq.n	80032b8 <I2C_ITError+0x44>
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b29      	cmp	r3, #41	@ 0x29
 80032b0:	d002      	beq.n	80032b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80032b6:	d10b      	bne.n	80032d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032b8:	2103      	movs	r1, #3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fb28 	bl	8003910 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2228      	movs	r2, #40	@ 0x28
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a60      	ldr	r2, [pc, #384]	@ (800344c <I2C_ITError+0x1d8>)
 80032cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80032ce:	e030      	b.n	8003332 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fb1b 	bl	8003910 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8e1 	bl	80034a2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b60      	cmp	r3, #96	@ 0x60
 80032ea:	d01f      	beq.n	800332c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d114      	bne.n	800332c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d109      	bne.n	8003324 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2210      	movs	r2, #16
 8003316:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2220      	movs	r2, #32
 800332a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d039      	beq.n	80033b4 <I2C_ITError+0x140>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b11      	cmp	r3, #17
 8003344:	d002      	beq.n	800334c <I2C_ITError+0xd8>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b21      	cmp	r3, #33	@ 0x21
 800334a:	d133      	bne.n	80033b4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800335a:	d107      	bne.n	800336c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800336a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fc55 	bl	8001c20 <HAL_DMA_GetState>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d017      	beq.n	80033ac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	4a33      	ldr	r2, [pc, #204]	@ (8003450 <I2C_ITError+0x1dc>)
 8003382:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fa99 	bl	80018c8 <HAL_DMA_Abort_IT>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d04d      	beq.n	8003438 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033a6:	4610      	mov	r0, r2
 80033a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033aa:	e045      	b.n	8003438 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f851 	bl	8003454 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033b2:	e041      	b.n	8003438 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d039      	beq.n	8003430 <I2C_ITError+0x1bc>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b12      	cmp	r3, #18
 80033c0:	d002      	beq.n	80033c8 <I2C_ITError+0x154>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b22      	cmp	r3, #34	@ 0x22
 80033c6:	d133      	bne.n	8003430 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d6:	d107      	bne.n	80033e8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fc17 	bl	8001c20 <HAL_DMA_GetState>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d017      	beq.n	8003428 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <I2C_ITError+0x1dc>)
 80033fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fa5b 	bl	80018c8 <HAL_DMA_Abort_IT>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d011      	beq.n	800343c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003422:	4610      	mov	r0, r2
 8003424:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003426:	e009      	b.n	800343c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f813 	bl	8003454 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800342e:	e005      	b.n	800343c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f80f 	bl	8003454 <I2C_TreatErrorCallback>
  }
}
 8003436:	e002      	b.n	800343e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003438:	bf00      	nop
 800343a:	e000      	b.n	800343e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800343c:	bf00      	nop
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	ffff0000 	.word	0xffff0000
 800344c:	08002a03 	.word	0x08002a03
 8003450:	080034eb 	.word	0x080034eb

08003454 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b60      	cmp	r3, #96	@ 0x60
 8003466:	d10e      	bne.n	8003486 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fab5 	bl	80029ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003484:	e009      	b.n	800349a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff faa0 	bl	80029da <HAL_I2C_ErrorCallback>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d103      	bne.n	80034c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d007      	beq.n	80034de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	619a      	str	r2, [r3, #24]
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	2200      	movs	r2, #0
 8003516:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff ff9b 	bl	8003454 <I2C_TreatErrorCallback>
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003536:	e03b      	b.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f8d5 	bl	80036ec <I2C_IsErrorOccurred>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e041      	b.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d02d      	beq.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7fd fe08 	bl	8001168 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d122      	bne.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d113      	bne.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e00f      	b.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d0b4      	beq.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e4:	e033      	b.n	800364e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f87e 	bl	80036ec <I2C_IsErrorOccurred>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e031      	b.n	800365e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d025      	beq.n	800364e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fd fdb1 	bl	8001168 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11a      	bne.n	800364e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d013      	beq.n	800364e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d1c4      	bne.n	80035e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003672:	e02f      	b.n	80036d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f837 	bl	80036ec <I2C_IsErrorOccurred>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e02d      	b.n	80036e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fd fd6e 	bl	8001168 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11a      	bne.n	80036d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d013      	beq.n	80036d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d1c8      	bne.n	8003674 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d068      	beq.n	80037ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2210      	movs	r2, #16
 800371e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003720:	e049      	b.n	80037b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d045      	beq.n	80037b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fd fd1d 	bl	8001168 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_IsErrorOccurred+0x54>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d13a      	bne.n	80037b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003752:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800375e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003762:	d121      	bne.n	80037a8 <I2C_IsErrorOccurred+0xbc>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800376a:	d01d      	beq.n	80037a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b20      	cmp	r3, #32
 8003770:	d01a      	beq.n	80037a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003780:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003782:	f7fd fcf1 	bl	8001168 <HAL_GetTick>
 8003786:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003788:	e00e      	b.n	80037a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800378a:	f7fd fced 	bl	8001168 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b19      	cmp	r3, #25
 8003796:	d907      	bls.n	80037a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80037a6:	e006      	b.n	80037b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d1e9      	bne.n	800378a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d003      	beq.n	80037cc <I2C_IsErrorOccurred+0xe0>
 80037c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0aa      	beq.n	8003722 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2220      	movs	r2, #32
 80037da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800382e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01c      	beq.n	800389a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff fe1e 	bl	80034a2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <I2C_IsErrorOccurred+0x1bc>)
 8003872:	400b      	ands	r3, r1
 8003874:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	431a      	orrs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800389a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3728      	adds	r7, #40	@ 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	fe00e800 	.word	0xfe00e800

080038ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	4613      	mov	r3, r2
 80038bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c4:	7a7b      	ldrb	r3, [r7, #9]
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	0d5b      	lsrs	r3, r3, #21
 80038e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <I2C_TransferConfig+0x60>)
 80038ec:	430b      	orrs	r3, r1
 80038ee:	43db      	mvns	r3, r3
 80038f0:	ea02 0103 	and.w	r1, r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	03ff63ff 	.word	0x03ff63ff

08003910 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00f      	beq.n	800394a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003930:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800393e:	2b28      	cmp	r3, #40	@ 0x28
 8003940:	d003      	beq.n	800394a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003948:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00f      	beq.n	8003974 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800395a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003968:	2b28      	cmp	r3, #40	@ 0x28
 800396a:	d003      	beq.n	8003974 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003972:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003974:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da03      	bge.n	8003984 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003982:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	2b10      	cmp	r3, #16
 8003988:	d103      	bne.n	8003992 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	2b20      	cmp	r3, #32
 8003996:	d103      	bne.n	80039a0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f043 0320 	orr.w	r3, r3, #32
 800399e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80039a0:	887b      	ldrh	r3, [r7, #2]
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d103      	bne.n	80039ae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43da      	mvns	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	400a      	ands	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d138      	bne.n	8003a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e032      	b.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	@ 0x24
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d139      	bne.n	8003aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e033      	b.n	8003aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2224      	movs	r2, #36	@ 0x24
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b04:	2300      	movs	r3, #0
 8003b06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e29b      	b.n	800404a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8087 	beq.w	8003c2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b20:	4b96      	ldr	r3, [pc, #600]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d00c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2c:	4b93      	ldr	r3, [pc, #588]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d112      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62>
 8003b38:	4b90      	ldr	r3, [pc, #576]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b44:	d10b      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	4b8d      	ldr	r3, [pc, #564]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d06c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x130>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d168      	bne.n	8003c2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e275      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x7a>
 8003b68:	4b84      	ldr	r3, [pc, #528]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a83      	ldr	r2, [pc, #524]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e02e      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x9c>
 8003b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7e      	ldr	r2, [pc, #504]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003b90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0xc0>
 8003ba2:	4b76      	ldr	r3, [pc, #472]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a75      	ldr	r2, [pc, #468]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b73      	ldr	r3, [pc, #460]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a72      	ldr	r2, [pc, #456]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xd8>
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fac4 	bl	8001168 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fac0 	bl	8001168 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e229      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b61      	ldr	r3, [pc, #388]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe8>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd fab0 	bl	8001168 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd faac 	bl	8001168 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e215      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x110>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d069      	beq.n	8003d0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3a:	4b50      	ldr	r3, [pc, #320]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b4d      	ldr	r3, [pc, #308]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x190>
 8003c52:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1e9      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b41      	ldr	r3, [pc, #260]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	493d      	ldr	r1, [pc, #244]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e040      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d023      	beq.n	8003cdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a38      	ldr	r2, [pc, #224]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fa62 	bl	8001168 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fd fa5e 	bl	8001168 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1c7      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b30      	ldr	r3, [pc, #192]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4929      	ldr	r1, [pc, #164]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
 8003cda:	e018      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fa3e 	bl	8001168 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fd fa3a 	bl	8001168 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1a3      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d038      	beq.n	8003d8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b16      	ldr	r3, [pc, #88]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d26:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fa1b 	bl	8001168 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fd fa17 	bl	8001168 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e180      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d48:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x23a>
 8003d54:	e01a      	b.n	8003d8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d56:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5a:	4a08      	ldr	r2, [pc, #32]	@ (8003d7c <HAL_RCC_OscConfig+0x280>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fd fa01 	bl	8001168 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fd f9fd 	bl	8001168 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d903      	bls.n	8003d80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e166      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
 8003d7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	4b92      	ldr	r3, [pc, #584]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ee      	bne.n	8003d6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a4 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b8c      	ldr	r3, [pc, #560]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b89      	ldr	r3, [pc, #548]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	4a88      	ldr	r2, [pc, #544]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003db2:	4b86      	ldr	r3, [pc, #536]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4b83      	ldr	r3, [pc, #524]	@ (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dce:	4b80      	ldr	r3, [pc, #512]	@ (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fd f9c5 	bl	8001168 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fd f9c1 	bl	8001168 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	@ 0x64
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e12a      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df4:	4b76      	ldr	r3, [pc, #472]	@ (8003fd0 <HAL_RCC_OscConfig+0x4d4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x31a>
 8003e08:	4b70      	ldr	r3, [pc, #448]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a6f      	ldr	r2, [pc, #444]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e14:	e02d      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x33c>
 8003e1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	4a6a      	ldr	r2, [pc, #424]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2a:	4b68      	ldr	r3, [pc, #416]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a67      	ldr	r2, [pc, #412]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	e01c      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x35e>
 8003e40:	4b62      	ldr	r3, [pc, #392]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a61      	ldr	r2, [pc, #388]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a5e      	ldr	r2, [pc, #376]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e58:	e00b      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
 8003e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e66:	4b59      	ldr	r3, [pc, #356]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a58      	ldr	r2, [pc, #352]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd f975 	bl	8001168 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd f971 	bl	8001168 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0d8      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b4c      	ldr	r3, [pc, #304]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RCC_OscConfig+0x386>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd f95f 	bl	8001168 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd f95b 	bl	8001168 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0c2      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	4b41      	ldr	r3, [pc, #260]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	4a3c      	ldr	r2, [pc, #240]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80ae 	beq.w	8004048 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eec:	4b37      	ldr	r3, [pc, #220]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d06d      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d14b      	bne.n	8003f98 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b32      	ldr	r3, [pc, #200]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a31      	ldr	r2, [pc, #196]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd f92c 	bl	8001168 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd f928 	bl	8001168 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e091      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b29      	ldr	r3, [pc, #164]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	491b      	ldr	r1, [pc, #108]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f64:	4b19      	ldr	r3, [pc, #100]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fd f8fa 	bl	8001168 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd f8f6 	bl	8001168 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e05f      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8a:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x47c>
 8003f96:	e057      	b.n	8004048 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd f8e0 	bl	8001168 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd f8dc 	bl	8001168 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e045      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x4b0>
 8003fca:	e03d      	b.n	8004048 <HAL_RCC_OscConfig+0x54c>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <HAL_RCC_OscConfig+0x558>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d030      	beq.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d129      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d122      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800400a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800400c:	4293      	cmp	r3, r2
 800400e:	d119      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d10f      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800

08004058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0d0      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b6a      	ldr	r3, [pc, #424]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b67      	ldr	r3, [pc, #412]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 020f 	bic.w	r2, r3, #15
 8004086:	4965      	ldr	r1, [pc, #404]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d040      	beq.n	800417c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d115      	bne.n	800413a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b41      	ldr	r3, [pc, #260]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e073      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3d      	ldr	r3, [pc, #244]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06b      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b39      	ldr	r3, [pc, #228]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4936      	ldr	r1, [pc, #216]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7fd f80c 	bl	8001168 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fd f808 	bl	8001168 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e053      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b27      	ldr	r3, [pc, #156]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d210      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b24      	ldr	r3, [pc, #144]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 020f 	bic.w	r2, r3, #15
 8004192:	4922      	ldr	r1, [pc, #136]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	@ (800421c <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d6:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	@ (8004224 <HAL_RCC_ClockConfig+0x1cc>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	@ (8004228 <HAL_RCC_ClockConfig+0x1d0>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	@ (800422c <HAL_RCC_ClockConfig+0x1d4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc ff68 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	08007cec 	.word	0x08007cec
 8004228:	20000000 	.word	0x20000000
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b090      	sub	sp, #64	@ 0x40
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	637b      	str	r3, [r7, #52]	@ 0x34
 800423c:	2300      	movs	r3, #0
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004240:	2300      	movs	r3, #0
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80a1 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x16c>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e09b      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004266:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004268:	e09b      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b53      	ldr	r3, [pc, #332]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800426c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800426e:	e098      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b4f      	ldr	r3, [pc, #316]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800427a:	4b4d      	ldr	r3, [pc, #308]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b4a      	ldr	r3, [pc, #296]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	2200      	movs	r2, #0
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	627a      	str	r2, [r7, #36]	@ 0x24
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004298:	2100      	movs	r1, #0
 800429a:	4b47      	ldr	r3, [pc, #284]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800429c:	fb03 f201 	mul.w	r2, r3, r1
 80042a0:	2300      	movs	r3, #0
 80042a2:	fb00 f303 	mul.w	r3, r0, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4a43      	ldr	r2, [pc, #268]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042aa:	fba0 1202 	umull	r1, r2, r0, r2
 80042ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b0:	460a      	mov	r2, r1
 80042b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b6:	4413      	add	r3, r2
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042bc:	2200      	movs	r2, #0
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	61fa      	str	r2, [r7, #28]
 80042c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042ca:	f7fc f811 	bl	80002f0 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4613      	mov	r3, r2
 80042d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d6:	e053      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d8:	4b35      	ldr	r3, [pc, #212]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	2200      	movs	r2, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	617a      	str	r2, [r7, #20]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ea:	f04f 0b00 	mov.w	fp, #0
 80042ee:	4652      	mov	r2, sl
 80042f0:	465b      	mov	r3, fp
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	0159      	lsls	r1, r3, #5
 80042fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004300:	0150      	lsls	r0, r2, #5
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	ebb2 080a 	subs.w	r8, r2, sl
 800430a:	eb63 090b 	sbc.w	r9, r3, fp
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800431a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800431e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004322:	ebb2 0408 	subs.w	r4, r2, r8
 8004326:	eb63 0509 	sbc.w	r5, r3, r9
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	00eb      	lsls	r3, r5, #3
 8004334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004338:	00e2      	lsls	r2, r4, #3
 800433a:	4614      	mov	r4, r2
 800433c:	461d      	mov	r5, r3
 800433e:	eb14 030a 	adds.w	r3, r4, sl
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	eb45 030b 	adc.w	r3, r5, fp
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004356:	4629      	mov	r1, r5
 8004358:	028b      	lsls	r3, r1, #10
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004360:	4621      	mov	r1, r4
 8004362:	028a      	lsls	r2, r1, #10
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436a:	2200      	movs	r2, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	60fa      	str	r2, [r7, #12]
 8004370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004374:	f7fb ffbc 	bl	80002f0 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004390:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800439e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3740      	adds	r7, #64	@ 0x40
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	017d7840 	.word	0x017d7840

080043bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	@ (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08007cfc 	.word	0x08007cfc

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	@ (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	08007cfc 	.word	0x08007cfc

08004424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800444c:	4b69      	ldr	r3, [pc, #420]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a68      	ldr	r2, [pc, #416]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	4b66      	ldr	r3, [pc, #408]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004460:	4964      	ldr	r1, [pc, #400]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800447e:	4b5d      	ldr	r3, [pc, #372]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	4959      	ldr	r1, [pc, #356]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449c:	d101      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ba:	4b4e      	ldr	r3, [pc, #312]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	494a      	ldr	r1, [pc, #296]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 808b 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	4a39      	ldr	r2, [pc, #228]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	@ 0x40
 8004514:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004520:	4b35      	ldr	r3, [pc, #212]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a34      	ldr	r2, [pc, #208]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fc fe1c 	bl	8001168 <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fc fe18 	bl	8001168 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e38f      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004552:	4b28      	ldr	r3, [pc, #160]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d035      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d02e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004592:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004598:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d114      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fc fde0 	bl	8001168 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fc fddc 	bl	8001168 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e351      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ee      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045da:	d111      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	4901      	ldr	r1, [pc, #4]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
 80045f2:	e00b      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	0ffffcff 	.word	0x0ffffcff
 8004600:	4bac      	ldr	r3, [pc, #688]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4aab      	ldr	r2, [pc, #684]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	4ba9      	ldr	r3, [pc, #676]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	49a6      	ldr	r1, [pc, #664]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	4313      	orrs	r3, r2
 800461c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462a:	4ba2      	ldr	r3, [pc, #648]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004630:	4aa0      	ldr	r2, [pc, #640]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800463a:	4b9e      	ldr	r3, [pc, #632]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	499b      	ldr	r1, [pc, #620]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b96      	ldr	r3, [pc, #600]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004666:	4993      	ldr	r1, [pc, #588]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467a:	4b8e      	ldr	r3, [pc, #568]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004688:	498a      	ldr	r1, [pc, #552]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469c:	4b85      	ldr	r3, [pc, #532]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046aa:	4982      	ldr	r1, [pc, #520]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046be:	4b7d      	ldr	r3, [pc, #500]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	4979      	ldr	r1, [pc, #484]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e0:	4b74      	ldr	r3, [pc, #464]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	4971      	ldr	r1, [pc, #452]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004702:	4b6c      	ldr	r3, [pc, #432]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f023 020c 	bic.w	r2, r3, #12
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004710:	4968      	ldr	r1, [pc, #416]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004724:	4b63      	ldr	r3, [pc, #396]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	4960      	ldr	r1, [pc, #384]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004746:	4b5b      	ldr	r3, [pc, #364]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	4957      	ldr	r1, [pc, #348]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004768:	4b52      	ldr	r3, [pc, #328]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	494f      	ldr	r1, [pc, #316]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800478a:	4b4a      	ldr	r3, [pc, #296]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	4946      	ldr	r1, [pc, #280]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047ac:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	493e      	ldr	r1, [pc, #248]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ce:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047dc:	4935      	ldr	r1, [pc, #212]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f0:	4b30      	ldr	r3, [pc, #192]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fe:	492d      	ldr	r1, [pc, #180]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004812:	4b28      	ldr	r3, [pc, #160]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004820:	4924      	ldr	r1, [pc, #144]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004842:	2301      	movs	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004852:	4b18      	ldr	r3, [pc, #96]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004858:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	4914      	ldr	r1, [pc, #80]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004884:	490b      	ldr	r1, [pc, #44]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a8:	4902      	ldr	r1, [pc, #8]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048c4:	4b8a      	ldr	r3, [pc, #552]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	4986      	ldr	r1, [pc, #536]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048e8:	4b81      	ldr	r3, [pc, #516]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f8:	497d      	ldr	r1, [pc, #500]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d006      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80d6 	beq.w	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a75      	ldr	r2, [pc, #468]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800491e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004920:	f7fc fc22 	bl	8001168 <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004928:	f7fc fc1e 	bl	8001168 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	@ 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e195      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493a:	4b6d      	ldr	r3, [pc, #436]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d021      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800495a:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004968:	4b61      	ldr	r3, [pc, #388]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	4958      	ldr	r1, [pc, #352]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c0:	d129      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049c2:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049d0:	4b47      	ldr	r3, [pc, #284]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d6:	0f1b      	lsrs	r3, r3, #28
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	493e      	ldr	r1, [pc, #248]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049fe:	4b3c      	ldr	r3, [pc, #240]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a04:	f023 021f 	bic.w	r2, r3, #31
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	4938      	ldr	r1, [pc, #224]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01d      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a22:	4b33      	ldr	r3, [pc, #204]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a30:	4b2f      	ldr	r3, [pc, #188]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a36:	0f1b      	lsrs	r3, r3, #28
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	019a      	lsls	r2, r3, #6
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	071b      	lsls	r3, r3, #28
 8004a56:	4926      	ldr	r1, [pc, #152]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d011      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	019a      	lsls	r2, r3, #6
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	061b      	lsls	r3, r3, #24
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	071b      	lsls	r3, r3, #28
 8004a86:	491a      	ldr	r1, [pc, #104]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a8e:	4b18      	ldr	r3, [pc, #96]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fb65 	bl	8001168 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fc fb61 	bl	8001168 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b64      	cmp	r3, #100	@ 0x64
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e0d8      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	f040 80ce 	bne.w	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fb48 	bl	8001168 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ada:	e00b      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004adc:	f7fc fb44 	bl	8001168 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	@ 0x64
 8004ae8:	d904      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0bb      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b00:	d0ec      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d12a      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b2a:	4b51      	ldr	r3, [pc, #324]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b38:	4b4d      	ldr	r3, [pc, #308]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	0f1b      	lsrs	r3, r3, #28
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4944      	ldr	r1, [pc, #272]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b66:	4b42      	ldr	r3, [pc, #264]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	3b01      	subs	r3, #1
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	493d      	ldr	r1, [pc, #244]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d022      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b94:	d11d      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b96:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ba4:	4b32      	ldr	r3, [pc, #200]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004baa:	0f1b      	lsrs	r3, r3, #28
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	019a      	lsls	r2, r3, #6
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	4929      	ldr	r1, [pc, #164]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d028      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bde:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	0e1b      	lsrs	r3, r3, #24
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bec:	4b20      	ldr	r3, [pc, #128]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	019a      	lsls	r2, r3, #6
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	4917      	ldr	r1, [pc, #92]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4911      	ldr	r1, [pc, #68]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c30:	4b0f      	ldr	r3, [pc, #60]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0e      	ldr	r2, [pc, #56]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fc fa94 	bl	8001168 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c44:	f7fc fa90 	bl	8001168 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e007      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c56:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c62:	d1ef      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800

08004c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e040      	b.n	8004d08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc f8ec 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2224      	movs	r2, #36	@ 0x24
 8004ca0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fe28 	bl	8005910 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fbc1 	bl	8005448 <UART_SetConfig>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e01b      	b.n	8004d08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fea7 	bl	8005a54 <UART_CheckIdleState>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	@ 0x28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d177      	bne.n	8004e18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Transmit+0x24>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e070      	b.n	8004e1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2221      	movs	r2, #33	@ 0x21
 8004d44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d46:	f7fc fa0f 	bl	8001168 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d64:	d108      	bne.n	8004d78 <HAL_UART_Transmit+0x68>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e003      	b.n	8004d80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d80:	e02f      	b.n	8004de2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2180      	movs	r1, #128	@ 0x80
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 ff09 	bl	8005ba4 <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e03b      	b.n	8004e1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	3302      	adds	r3, #2
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	e007      	b.n	8004dd0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1c9      	bne.n	8004d82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	2140      	movs	r1, #64	@ 0x40
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fed3 	bl	8005ba4 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e005      	b.n	8004e1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b0ba      	sub	sp, #232	@ 0xe8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e52:	4013      	ands	r3, r2
 8004e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d115      	bne.n	8004e8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00f      	beq.n	8004e8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 82ac 	beq.w	80053da <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
      }
      return;
 8004e8a:	e2a6      	b.n	80053da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8117 	beq.w	80050c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ea2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ea6:	4b85      	ldr	r3, [pc, #532]	@ (80050bc <HAL_UART_IRQHandler+0x298>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 810a 	beq.w	80050c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d011      	beq.n	8004ee0 <HAL_UART_IRQHandler+0xbc>
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d011      	beq.n	8004f10 <HAL_UART_IRQHandler+0xec>
 8004eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2202      	movs	r2, #2
 8004efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f06:	f043 0204 	orr.w	r2, r3, #4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d011      	beq.n	8004f40 <HAL_UART_IRQHandler+0x11c>
 8004f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f36:	f043 0202 	orr.w	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d017      	beq.n	8004f7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f72:	f043 0208 	orr.w	r2, r3, #8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d012      	beq.n	8004fae <HAL_UART_IRQHandler+0x18a>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00c      	beq.n	8004fae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa4:	f043 0220 	orr.w	r2, r3, #32
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8212 	beq.w	80053de <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff6:	2b40      	cmp	r3, #64	@ 0x40
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04f      	beq.n	80050a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fe39 	bl	8005c7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005016:	2b40      	cmp	r3, #64	@ 0x40
 8005018:	d141      	bne.n	800509e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005046:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800504a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800505e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1d9      	bne.n	800501a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506a:	2b00      	cmp	r3, #0
 800506c:	d013      	beq.n	8005096 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005072:	4a13      	ldr	r2, [pc, #76]	@ (80050c0 <HAL_UART_IRQHandler+0x29c>)
 8005074:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc fc24 	bl	80018c8 <HAL_DMA_Abort_IT>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d017      	beq.n	80050b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005090:	4610      	mov	r0, r2
 8005092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	e00f      	b.n	80050b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f9b6 	bl	8005408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	e00b      	b.n	80050b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f9b2 	bl	8005408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	e007      	b.n	80050b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9ae 	bl	8005408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80050b4:	e193      	b.n	80053de <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b6:	bf00      	nop
    return;
 80050b8:	e191      	b.n	80053de <HAL_UART_IRQHandler+0x5ba>
 80050ba:	bf00      	nop
 80050bc:	04000120 	.word	0x04000120
 80050c0:	08005d47 	.word	0x08005d47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f040 814c 	bne.w	8005366 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8145 	beq.w	8005366 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 813e 	beq.w	8005366 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2210      	movs	r2, #16
 80050f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fc:	2b40      	cmp	r3, #64	@ 0x40
 80050fe:	f040 80b6 	bne.w	800526e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800510e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8165 	beq.w	80053e2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800511e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005122:	429a      	cmp	r2, r3
 8005124:	f080 815d 	bcs.w	80053e2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800512e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513c:	f000 8086 	beq.w	800524c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005154:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800515c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800516a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800516e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1da      	bne.n	8005140 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800519a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e1      	bne.n	800518a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800521a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800522e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005230:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800523c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e4      	bne.n	800520c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	4618      	mov	r0, r3
 8005248:	f7fc face 	bl	80017e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800525e:	b29b      	uxth	r3, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8d8 	bl	800541c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800526c:	e0b9      	b.n	80053e2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800527a:	b29b      	uxth	r3, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80ab 	beq.w	80053e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a6 	beq.w	80053e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e4      	bne.n	800529a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	623b      	str	r3, [r7, #32]
   return(result);
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e3      	bne.n	80052d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	60fb      	str	r3, [r7, #12]
   return(result);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0310 	bic.w	r3, r3, #16
 8005330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	69b9      	ldr	r1, [r7, #24]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	617b      	str	r3, [r7, #20]
   return(result);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e4      	bne.n	800531c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f85c 	bl	800541c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005364:	e03f      	b.n	80053e6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00e      	beq.n	8005390 <HAL_UART_IRQHandler+0x56c>
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f853 	bl	8005434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800538e:	e02d      	b.n	80053ec <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01c      	beq.n	80053ea <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
    }
    return;
 80053b8:	e017      	b.n	80053ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d012      	beq.n	80053ec <HAL_UART_IRQHandler+0x5c8>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00c      	beq.n	80053ec <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fccd 	bl	8005d72 <UART_EndTransmit_IT>
    return;
 80053d8:	e008      	b.n	80053ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80053da:	bf00      	nop
 80053dc:	e006      	b.n	80053ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80053de:	bf00      	nop
 80053e0:	e004      	b.n	80053ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80053ea:	bf00      	nop
  }

}
 80053ec:	37e8      	adds	r7, #232	@ 0xe8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop

080053f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4ba6      	ldr	r3, [pc, #664]	@ (800570c <UART_SetConfig+0x2c4>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	430b      	orrs	r3, r1
 800547e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a94      	ldr	r2, [pc, #592]	@ (8005710 <UART_SetConfig+0x2c8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d120      	bne.n	8005506 <UART_SetConfig+0xbe>
 80054c4:	4b93      	ldr	r3, [pc, #588]	@ (8005714 <UART_SetConfig+0x2cc>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d816      	bhi.n	8005500 <UART_SetConfig+0xb8>
 80054d2:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_SetConfig+0x90>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054ef 	.word	0x080054ef
 80054e4:	080054fb 	.word	0x080054fb
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e150      	b.n	8005790 <UART_SetConfig+0x348>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e14d      	b.n	8005790 <UART_SetConfig+0x348>
 80054f4:	2304      	movs	r3, #4
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e14a      	b.n	8005790 <UART_SetConfig+0x348>
 80054fa:	2308      	movs	r3, #8
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e147      	b.n	8005790 <UART_SetConfig+0x348>
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e144      	b.n	8005790 <UART_SetConfig+0x348>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a83      	ldr	r2, [pc, #524]	@ (8005718 <UART_SetConfig+0x2d0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d132      	bne.n	8005576 <UART_SetConfig+0x12e>
 8005510:	4b80      	ldr	r3, [pc, #512]	@ (8005714 <UART_SetConfig+0x2cc>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d828      	bhi.n	8005570 <UART_SetConfig+0x128>
 800551e:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <UART_SetConfig+0xdc>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005559 	.word	0x08005559
 8005528:	08005571 	.word	0x08005571
 800552c:	08005571 	.word	0x08005571
 8005530:	08005571 	.word	0x08005571
 8005534:	08005565 	.word	0x08005565
 8005538:	08005571 	.word	0x08005571
 800553c:	08005571 	.word	0x08005571
 8005540:	08005571 	.word	0x08005571
 8005544:	0800555f 	.word	0x0800555f
 8005548:	08005571 	.word	0x08005571
 800554c:	08005571 	.word	0x08005571
 8005550:	08005571 	.word	0x08005571
 8005554:	0800556b 	.word	0x0800556b
 8005558:	2300      	movs	r3, #0
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e118      	b.n	8005790 <UART_SetConfig+0x348>
 800555e:	2302      	movs	r3, #2
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e115      	b.n	8005790 <UART_SetConfig+0x348>
 8005564:	2304      	movs	r3, #4
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e112      	b.n	8005790 <UART_SetConfig+0x348>
 800556a:	2308      	movs	r3, #8
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e10f      	b.n	8005790 <UART_SetConfig+0x348>
 8005570:	2310      	movs	r3, #16
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e10c      	b.n	8005790 <UART_SetConfig+0x348>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a68      	ldr	r2, [pc, #416]	@ (800571c <UART_SetConfig+0x2d4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d120      	bne.n	80055c2 <UART_SetConfig+0x17a>
 8005580:	4b64      	ldr	r3, [pc, #400]	@ (8005714 <UART_SetConfig+0x2cc>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005586:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800558a:	2b30      	cmp	r3, #48	@ 0x30
 800558c:	d013      	beq.n	80055b6 <UART_SetConfig+0x16e>
 800558e:	2b30      	cmp	r3, #48	@ 0x30
 8005590:	d814      	bhi.n	80055bc <UART_SetConfig+0x174>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d009      	beq.n	80055aa <UART_SetConfig+0x162>
 8005596:	2b20      	cmp	r3, #32
 8005598:	d810      	bhi.n	80055bc <UART_SetConfig+0x174>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <UART_SetConfig+0x15c>
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d006      	beq.n	80055b0 <UART_SetConfig+0x168>
 80055a2:	e00b      	b.n	80055bc <UART_SetConfig+0x174>
 80055a4:	2300      	movs	r3, #0
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e0f2      	b.n	8005790 <UART_SetConfig+0x348>
 80055aa:	2302      	movs	r3, #2
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e0ef      	b.n	8005790 <UART_SetConfig+0x348>
 80055b0:	2304      	movs	r3, #4
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e0ec      	b.n	8005790 <UART_SetConfig+0x348>
 80055b6:	2308      	movs	r3, #8
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e0e9      	b.n	8005790 <UART_SetConfig+0x348>
 80055bc:	2310      	movs	r3, #16
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e0e6      	b.n	8005790 <UART_SetConfig+0x348>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a56      	ldr	r2, [pc, #344]	@ (8005720 <UART_SetConfig+0x2d8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d120      	bne.n	800560e <UART_SetConfig+0x1c6>
 80055cc:	4b51      	ldr	r3, [pc, #324]	@ (8005714 <UART_SetConfig+0x2cc>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d8:	d013      	beq.n	8005602 <UART_SetConfig+0x1ba>
 80055da:	2bc0      	cmp	r3, #192	@ 0xc0
 80055dc:	d814      	bhi.n	8005608 <UART_SetConfig+0x1c0>
 80055de:	2b80      	cmp	r3, #128	@ 0x80
 80055e0:	d009      	beq.n	80055f6 <UART_SetConfig+0x1ae>
 80055e2:	2b80      	cmp	r3, #128	@ 0x80
 80055e4:	d810      	bhi.n	8005608 <UART_SetConfig+0x1c0>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <UART_SetConfig+0x1a8>
 80055ea:	2b40      	cmp	r3, #64	@ 0x40
 80055ec:	d006      	beq.n	80055fc <UART_SetConfig+0x1b4>
 80055ee:	e00b      	b.n	8005608 <UART_SetConfig+0x1c0>
 80055f0:	2300      	movs	r3, #0
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e0cc      	b.n	8005790 <UART_SetConfig+0x348>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e0c9      	b.n	8005790 <UART_SetConfig+0x348>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e0c6      	b.n	8005790 <UART_SetConfig+0x348>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e0c3      	b.n	8005790 <UART_SetConfig+0x348>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e0c0      	b.n	8005790 <UART_SetConfig+0x348>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a44      	ldr	r2, [pc, #272]	@ (8005724 <UART_SetConfig+0x2dc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d125      	bne.n	8005664 <UART_SetConfig+0x21c>
 8005618:	4b3e      	ldr	r3, [pc, #248]	@ (8005714 <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005626:	d017      	beq.n	8005658 <UART_SetConfig+0x210>
 8005628:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800562c:	d817      	bhi.n	800565e <UART_SetConfig+0x216>
 800562e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005632:	d00b      	beq.n	800564c <UART_SetConfig+0x204>
 8005634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005638:	d811      	bhi.n	800565e <UART_SetConfig+0x216>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <UART_SetConfig+0x1fe>
 800563e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005642:	d006      	beq.n	8005652 <UART_SetConfig+0x20a>
 8005644:	e00b      	b.n	800565e <UART_SetConfig+0x216>
 8005646:	2300      	movs	r3, #0
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e0a1      	b.n	8005790 <UART_SetConfig+0x348>
 800564c:	2302      	movs	r3, #2
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e09e      	b.n	8005790 <UART_SetConfig+0x348>
 8005652:	2304      	movs	r3, #4
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e09b      	b.n	8005790 <UART_SetConfig+0x348>
 8005658:	2308      	movs	r3, #8
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e098      	b.n	8005790 <UART_SetConfig+0x348>
 800565e:	2310      	movs	r3, #16
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e095      	b.n	8005790 <UART_SetConfig+0x348>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2f      	ldr	r2, [pc, #188]	@ (8005728 <UART_SetConfig+0x2e0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d125      	bne.n	80056ba <UART_SetConfig+0x272>
 800566e:	4b29      	ldr	r3, [pc, #164]	@ (8005714 <UART_SetConfig+0x2cc>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800567c:	d017      	beq.n	80056ae <UART_SetConfig+0x266>
 800567e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005682:	d817      	bhi.n	80056b4 <UART_SetConfig+0x26c>
 8005684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005688:	d00b      	beq.n	80056a2 <UART_SetConfig+0x25a>
 800568a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568e:	d811      	bhi.n	80056b4 <UART_SetConfig+0x26c>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <UART_SetConfig+0x254>
 8005694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005698:	d006      	beq.n	80056a8 <UART_SetConfig+0x260>
 800569a:	e00b      	b.n	80056b4 <UART_SetConfig+0x26c>
 800569c:	2301      	movs	r3, #1
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e076      	b.n	8005790 <UART_SetConfig+0x348>
 80056a2:	2302      	movs	r3, #2
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e073      	b.n	8005790 <UART_SetConfig+0x348>
 80056a8:	2304      	movs	r3, #4
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e070      	b.n	8005790 <UART_SetConfig+0x348>
 80056ae:	2308      	movs	r3, #8
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e06d      	b.n	8005790 <UART_SetConfig+0x348>
 80056b4:	2310      	movs	r3, #16
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e06a      	b.n	8005790 <UART_SetConfig+0x348>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <UART_SetConfig+0x2e4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d138      	bne.n	8005736 <UART_SetConfig+0x2ee>
 80056c4:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <UART_SetConfig+0x2cc>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056d2:	d017      	beq.n	8005704 <UART_SetConfig+0x2bc>
 80056d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056d8:	d82a      	bhi.n	8005730 <UART_SetConfig+0x2e8>
 80056da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056de:	d00b      	beq.n	80056f8 <UART_SetConfig+0x2b0>
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e4:	d824      	bhi.n	8005730 <UART_SetConfig+0x2e8>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <UART_SetConfig+0x2aa>
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ee:	d006      	beq.n	80056fe <UART_SetConfig+0x2b6>
 80056f0:	e01e      	b.n	8005730 <UART_SetConfig+0x2e8>
 80056f2:	2300      	movs	r3, #0
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e04b      	b.n	8005790 <UART_SetConfig+0x348>
 80056f8:	2302      	movs	r3, #2
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e048      	b.n	8005790 <UART_SetConfig+0x348>
 80056fe:	2304      	movs	r3, #4
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e045      	b.n	8005790 <UART_SetConfig+0x348>
 8005704:	2308      	movs	r3, #8
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e042      	b.n	8005790 <UART_SetConfig+0x348>
 800570a:	bf00      	nop
 800570c:	efff69f3 	.word	0xefff69f3
 8005710:	40011000 	.word	0x40011000
 8005714:	40023800 	.word	0x40023800
 8005718:	40004400 	.word	0x40004400
 800571c:	40004800 	.word	0x40004800
 8005720:	40004c00 	.word	0x40004c00
 8005724:	40005000 	.word	0x40005000
 8005728:	40011400 	.word	0x40011400
 800572c:	40007800 	.word	0x40007800
 8005730:	2310      	movs	r3, #16
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e02c      	b.n	8005790 <UART_SetConfig+0x348>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a72      	ldr	r2, [pc, #456]	@ (8005904 <UART_SetConfig+0x4bc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d125      	bne.n	800578c <UART_SetConfig+0x344>
 8005740:	4b71      	ldr	r3, [pc, #452]	@ (8005908 <UART_SetConfig+0x4c0>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005746:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800574a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800574e:	d017      	beq.n	8005780 <UART_SetConfig+0x338>
 8005750:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005754:	d817      	bhi.n	8005786 <UART_SetConfig+0x33e>
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575a:	d00b      	beq.n	8005774 <UART_SetConfig+0x32c>
 800575c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005760:	d811      	bhi.n	8005786 <UART_SetConfig+0x33e>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <UART_SetConfig+0x326>
 8005766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800576a:	d006      	beq.n	800577a <UART_SetConfig+0x332>
 800576c:	e00b      	b.n	8005786 <UART_SetConfig+0x33e>
 800576e:	2300      	movs	r3, #0
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e00d      	b.n	8005790 <UART_SetConfig+0x348>
 8005774:	2302      	movs	r3, #2
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e00a      	b.n	8005790 <UART_SetConfig+0x348>
 800577a:	2304      	movs	r3, #4
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e007      	b.n	8005790 <UART_SetConfig+0x348>
 8005780:	2308      	movs	r3, #8
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e004      	b.n	8005790 <UART_SetConfig+0x348>
 8005786:	2310      	movs	r3, #16
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e001      	b.n	8005790 <UART_SetConfig+0x348>
 800578c:	2310      	movs	r3, #16
 800578e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005798:	d15b      	bne.n	8005852 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d828      	bhi.n	80057f2 <UART_SetConfig+0x3aa>
 80057a0:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <UART_SetConfig+0x360>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057d5 	.word	0x080057d5
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	080057f3 	.word	0x080057f3
 80057b8:	080057e3 	.word	0x080057e3
 80057bc:	080057f3 	.word	0x080057f3
 80057c0:	080057f3 	.word	0x080057f3
 80057c4:	080057f3 	.word	0x080057f3
 80057c8:	080057eb 	.word	0x080057eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe fe02 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80057d0:	61b8      	str	r0, [r7, #24]
        break;
 80057d2:	e013      	b.n	80057fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d4:	f7fe fe12 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 80057d8:	61b8      	str	r0, [r7, #24]
        break;
 80057da:	e00f      	b.n	80057fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057dc:	4b4b      	ldr	r3, [pc, #300]	@ (800590c <UART_SetConfig+0x4c4>)
 80057de:	61bb      	str	r3, [r7, #24]
        break;
 80057e0:	e00c      	b.n	80057fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e2:	f7fe fd25 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80057e6:	61b8      	str	r0, [r7, #24]
        break;
 80057e8:	e008      	b.n	80057fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ee:	61bb      	str	r3, [r7, #24]
        break;
 80057f0:	e004      	b.n	80057fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	77bb      	strb	r3, [r7, #30]
        break;
 80057fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d074      	beq.n	80058ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	005a      	lsls	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	441a      	add	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b0f      	cmp	r3, #15
 800581c:	d916      	bls.n	800584c <UART_SetConfig+0x404>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005824:	d212      	bcs.n	800584c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f023 030f 	bic.w	r3, r3, #15
 800582e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	b29a      	uxth	r2, r3
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	4313      	orrs	r3, r2
 8005840:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	89fa      	ldrh	r2, [r7, #14]
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	e04f      	b.n	80058ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	77bb      	strb	r3, [r7, #30]
 8005850:	e04c      	b.n	80058ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005852:	7ffb      	ldrb	r3, [r7, #31]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d828      	bhi.n	80058aa <UART_SetConfig+0x462>
 8005858:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <UART_SetConfig+0x418>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005885 	.word	0x08005885
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005895 	.word	0x08005895
 800586c:	080058ab 	.word	0x080058ab
 8005870:	0800589b 	.word	0x0800589b
 8005874:	080058ab 	.word	0x080058ab
 8005878:	080058ab 	.word	0x080058ab
 800587c:	080058ab 	.word	0x080058ab
 8005880:	080058a3 	.word	0x080058a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005884:	f7fe fda6 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8005888:	61b8      	str	r0, [r7, #24]
        break;
 800588a:	e013      	b.n	80058b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800588c:	f7fe fdb6 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8005890:	61b8      	str	r0, [r7, #24]
        break;
 8005892:	e00f      	b.n	80058b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005894:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <UART_SetConfig+0x4c4>)
 8005896:	61bb      	str	r3, [r7, #24]
        break;
 8005898:	e00c      	b.n	80058b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589a:	f7fe fcc9 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 800589e:	61b8      	str	r0, [r7, #24]
        break;
 80058a0:	e008      	b.n	80058b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058a6:	61bb      	str	r3, [r7, #24]
        break;
 80058a8:	e004      	b.n	80058b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	77bb      	strb	r3, [r7, #30]
        break;
 80058b2:	bf00      	nop
    }

    if (pclk != 0U)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d018      	beq.n	80058ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085a      	lsrs	r2, r3, #1
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	441a      	add	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b0f      	cmp	r3, #15
 80058d2:	d909      	bls.n	80058e8 <UART_SetConfig+0x4a0>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058da:	d205      	bcs.n	80058e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	e001      	b.n	80058ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80058f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40007c00 	.word	0x40007c00
 8005908:	40023800 	.word	0x40023800
 800590c:	00f42400 	.word	0x00f42400

08005910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01a      	beq.n	8005a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a0e:	d10a      	bne.n	8005a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b098      	sub	sp, #96	@ 0x60
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a64:	f7fb fb80 	bl	8001168 <HAL_GetTick>
 8005a68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d12e      	bne.n	8005ad6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a80:	2200      	movs	r2, #0
 8005a82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f88c 	bl	8005ba4 <UART_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d021      	beq.n	8005ad6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e062      	b.n	8005b9c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d149      	bne.n	8005b78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aec:	2200      	movs	r2, #0
 8005aee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f856 	bl	8005ba4 <UART_WaitOnFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d03c      	beq.n	8005b78 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b50:	61fa      	str	r2, [r7, #28]
 8005b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e011      	b.n	8005b9c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3758      	adds	r7, #88	@ 0x58
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb4:	e04f      	b.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d04b      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fb fad3 	bl	8001168 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e04e      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d037      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b80      	cmp	r3, #128	@ 0x80
 8005bea:	d034      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b40      	cmp	r3, #64	@ 0x40
 8005bf0:	d031      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d110      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2208      	movs	r2, #8
 8005c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f838 	bl	8005c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2208      	movs	r2, #8
 8005c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e029      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c30:	d111      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f81e 	bl	8005c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e00f      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d0a0      	beq.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b095      	sub	sp, #84	@ 0x54
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ca6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f023 0301 	bic.w	r3, r3, #1
 8005cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d118      	bne.n	8005d26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f023 0310 	bic.w	r3, r3, #16
 8005d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e6      	bne.n	8005cf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d3a:	bf00      	nop
 8005d3c:	3754      	adds	r7, #84	@ 0x54
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff fb4f 	bl	8005408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b088      	sub	sp, #32
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e6      	bne.n	8005d7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fb1b 	bl	80053f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dbe:	bf00      	nop
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	4603      	mov	r3, r0
 8005dce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd8:	2b84      	cmp	r3, #132	@ 0x84
 8005dda:	d005      	beq.n	8005de8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ddc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	3303      	adds	r3, #3
 8005de6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005de8:	68fb      	ldr	r3, [r7, #12]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dfa:	f000 fadb 	bl	80063b4 <vTaskStartScheduler>
  
  return osOK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e06:	b089      	sub	sp, #36	@ 0x24
 8005e08:	af04      	add	r7, sp, #16
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d020      	beq.n	8005e58 <osThreadCreate+0x54>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01c      	beq.n	8005e58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685c      	ldr	r4, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691e      	ldr	r6, [r3, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ffc8 	bl	8005dc6 <makeFreeRtosPriority>
 8005e36:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e40:	9202      	str	r2, [sp, #8]
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	9100      	str	r1, [sp, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 f8d9 	bl	8006004 <xTaskCreateStatic>
 8005e52:	4603      	mov	r3, r0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e01c      	b.n	8005e92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685c      	ldr	r4, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e64:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ffaa 	bl	8005dc6 <makeFreeRtosPriority>
 8005e72:	4602      	mov	r2, r0
 8005e74:	f107 030c 	add.w	r3, r7, #12
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	9200      	str	r2, [sp, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	4632      	mov	r2, r6
 8005e80:	4629      	mov	r1, r5
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 f924 	bl	80060d0 <xTaskCreate>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d001      	beq.n	8005e92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e000      	b.n	8005e94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e92:	68fb      	ldr	r3, [r7, #12]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0208 	add.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f103 0208 	add.w	r2, r3, #8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f103 0208 	add.w	r2, r3, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f54:	d103      	bne.n	8005f5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e00c      	b.n	8005f78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3308      	adds	r3, #8
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <vListInsert+0x2e>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d2f6      	bcs.n	8005f66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6892      	ldr	r2, [r2, #8]
 8005fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6852      	ldr	r2, [r2, #4]
 8005fd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d103      	bne.n	8005fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	@ 0x38
 8006008:	af04      	add	r7, sp, #16
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <xTaskCreateStatic+0x52>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	b672      	cpsid	i
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	b662      	cpsie	i
 800604e:	61fb      	str	r3, [r7, #28]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006056:	2354      	movs	r3, #84	@ 0x54
 8006058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b54      	cmp	r3, #84	@ 0x54
 800605e:	d00d      	beq.n	800607c <xTaskCreateStatic+0x78>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	61bb      	str	r3, [r7, #24]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800607c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800607e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01e      	beq.n	80060c2 <xTaskCreateStatic+0xbe>
 8006084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01b      	beq.n	80060c2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800608a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	2202      	movs	r2, #2
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800609c:	2300      	movs	r3, #0
 800609e:	9303      	str	r3, [sp, #12]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	9302      	str	r3, [sp, #8]
 80060a4:	f107 0314 	add.w	r3, r7, #20
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f850 	bl	800615a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060bc:	f000 f8d8 	bl	8006270 <prvAddNewTaskToReadyList>
 80060c0:	e001      	b.n	80060c6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060c6:	697b      	ldr	r3, [r7, #20]
	}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3728      	adds	r7, #40	@ 0x28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fee9 	bl	8006ebc <pvPortMalloc>
 80060ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060f2:	2054      	movs	r0, #84	@ 0x54
 80060f4:	f000 fee2 	bl	8006ebc <pvPortMalloc>
 80060f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	631a      	str	r2, [r3, #48]	@ 0x30
 8006106:	e005      	b.n	8006114 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006108:	6978      	ldr	r0, [r7, #20]
 800610a:	f000 ffa5 	bl	8007058 <vPortFree>
 800610e:	e001      	b.n	8006114 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d017      	beq.n	800614a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	2300      	movs	r3, #0
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	9302      	str	r3, [sp, #8]
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68b9      	ldr	r1, [r7, #8]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f80e 	bl	800615a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800613e:	69f8      	ldr	r0, [r7, #28]
 8006140:	f000 f896 	bl	8006270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006144:	2301      	movs	r3, #1
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e002      	b.n	8006150 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
 800614e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006150:	69bb      	ldr	r3, [r7, #24]
	}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b088      	sub	sp, #32
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
 8006166:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006172:	440b      	add	r3, r1
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	b672      	cpsid	i
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	b662      	cpsie	i
 80061a0:	617b      	str	r3, [r7, #20]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01f      	beq.n	80061ee <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e012      	b.n	80061da <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	7819      	ldrb	r1, [r3, #0]
 80061bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	3334      	adds	r3, #52	@ 0x34
 80061c4:	460a      	mov	r2, r1
 80061c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d9e9      	bls.n	80061b4 <prvInitialiseNewTask+0x5a>
 80061e0:	e000      	b.n	80061e4 <prvInitialiseNewTask+0x8a>
			{
				break;
 80061e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061ec:	e003      	b.n	80061f6 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d901      	bls.n	8006200 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061fc:	2306      	movs	r3, #6
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006204:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800620a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	2200      	movs	r2, #0
 8006210:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	3304      	adds	r3, #4
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fe60 	bl	8005edc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	3318      	adds	r3, #24
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fe5b 	bl	8005edc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800622a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	f1c3 0207 	rsb	r2, r3, #7
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	68f9      	ldr	r1, [r7, #12]
 800624e:	69b8      	ldr	r0, [r7, #24]
 8006250:	f000 fc3a 	bl	8006ac8 <pxPortInitialiseStack>
 8006254:	4602      	mov	r2, r0
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800625a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006266:	bf00      	nop
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006278:	f000 fd38 	bl	8006cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800627c:	4b2a      	ldr	r3, [pc, #168]	@ (8006328 <prvAddNewTaskToReadyList+0xb8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <prvAddNewTaskToReadyList+0xb8>)
 8006284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006286:	4b29      	ldr	r3, [pc, #164]	@ (800632c <prvAddNewTaskToReadyList+0xbc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800628e:	4a27      	ldr	r2, [pc, #156]	@ (800632c <prvAddNewTaskToReadyList+0xbc>)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006294:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <prvAddNewTaskToReadyList+0xb8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d110      	bne.n	80062be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800629c:	f000 fad0 	bl	8006840 <prvInitialiseTaskLists>
 80062a0:	e00d      	b.n	80062be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062a2:	4b23      	ldr	r3, [pc, #140]	@ (8006330 <prvAddNewTaskToReadyList+0xc0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <prvAddNewTaskToReadyList+0xbc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d802      	bhi.n	80062be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062b8:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <prvAddNewTaskToReadyList+0xbc>)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062be:	4b1d      	ldr	r3, [pc, #116]	@ (8006334 <prvAddNewTaskToReadyList+0xc4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3301      	adds	r3, #1
 80062c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006334 <prvAddNewTaskToReadyList+0xc4>)
 80062c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	4b19      	ldr	r3, [pc, #100]	@ (8006338 <prvAddNewTaskToReadyList+0xc8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <prvAddNewTaskToReadyList+0xc8>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a15      	ldr	r2, [pc, #84]	@ (800633c <prvAddNewTaskToReadyList+0xcc>)
 80062e8:	441a      	add	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7ff fe00 	bl	8005ef6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062f6:	f000 fd2f 	bl	8006d58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <prvAddNewTaskToReadyList+0xc0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00e      	beq.n	8006320 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006302:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <prvAddNewTaskToReadyList+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d207      	bcs.n	8006320 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006310:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <prvAddNewTaskToReadyList+0xd0>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000538 	.word	0x20000538
 800632c:	20000438 	.word	0x20000438
 8006330:	20000544 	.word	0x20000544
 8006334:	20000554 	.word	0x20000554
 8006338:	20000540 	.word	0x20000540
 800633c:	2000043c 	.word	0x2000043c
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01a      	beq.n	800638c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <vTaskDelay+0x68>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <vTaskDelay+0x36>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	b672      	cpsid	i
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	b662      	cpsie	i
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800637a:	f000 f881 	bl	8006480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800637e:	2100      	movs	r1, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fb3b 	bl	80069fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006386:	f000 f889 	bl	800649c <xTaskResumeAll>
 800638a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006392:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <vTaskDelay+0x6c>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000560 	.word	0x20000560
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	@ 0x28
 80063b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063c2:	463a      	mov	r2, r7
 80063c4:	1d39      	adds	r1, r7, #4
 80063c6:	f107 0308 	add.w	r3, r7, #8
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fa f908 	bl	80005e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	9202      	str	r2, [sp, #8]
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	2300      	movs	r3, #0
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2300      	movs	r3, #0
 80063e0:	460a      	mov	r2, r1
 80063e2:	4921      	ldr	r1, [pc, #132]	@ (8006468 <vTaskStartScheduler+0xb4>)
 80063e4:	4821      	ldr	r0, [pc, #132]	@ (800646c <vTaskStartScheduler+0xb8>)
 80063e6:	f7ff fe0d 	bl	8006004 <xTaskCreateStatic>
 80063ea:	4603      	mov	r3, r0
 80063ec:	4a20      	ldr	r2, [pc, #128]	@ (8006470 <vTaskStartScheduler+0xbc>)
 80063ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006470 <vTaskStartScheduler+0xbc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063f8:	2301      	movs	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e001      	b.n	8006402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d118      	bne.n	800643a <vTaskStartScheduler+0x86>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	b672      	cpsid	i
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	b662      	cpsie	i
 800641c:	613b      	str	r3, [r7, #16]
}
 800641e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006420:	4b14      	ldr	r3, [pc, #80]	@ (8006474 <vTaskStartScheduler+0xc0>)
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006428:	4b13      	ldr	r3, [pc, #76]	@ (8006478 <vTaskStartScheduler+0xc4>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800642e:	4b13      	ldr	r3, [pc, #76]	@ (800647c <vTaskStartScheduler+0xc8>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006434:	f000 fbdc 	bl	8006bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006438:	e011      	b.n	800645e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d10d      	bne.n	800645e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	b672      	cpsid	i
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	b662      	cpsie	i
 8006456:	60fb      	str	r3, [r7, #12]
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	e7fd      	b.n	800645a <vTaskStartScheduler+0xa6>
}
 800645e:	bf00      	nop
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	08007ce4 	.word	0x08007ce4
 800646c:	08006811 	.word	0x08006811
 8006470:	2000055c 	.word	0x2000055c
 8006474:	20000558 	.word	0x20000558
 8006478:	20000544 	.word	0x20000544
 800647c:	2000053c 	.word	0x2000053c

08006480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006484:	4b04      	ldr	r3, [pc, #16]	@ (8006498 <vTaskSuspendAll+0x18>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	4a03      	ldr	r2, [pc, #12]	@ (8006498 <vTaskSuspendAll+0x18>)
 800648c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000560 	.word	0x20000560

0800649c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064aa:	4b43      	ldr	r3, [pc, #268]	@ (80065b8 <xTaskResumeAll+0x11c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10d      	bne.n	80064ce <xTaskResumeAll+0x32>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b6:	b672      	cpsid	i
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	b662      	cpsie	i
 80064c6:	603b      	str	r3, [r7, #0]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064ce:	f000 fc0d 	bl	8006cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064d2:	4b39      	ldr	r3, [pc, #228]	@ (80065b8 <xTaskResumeAll+0x11c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4a37      	ldr	r2, [pc, #220]	@ (80065b8 <xTaskResumeAll+0x11c>)
 80064da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064dc:	4b36      	ldr	r3, [pc, #216]	@ (80065b8 <xTaskResumeAll+0x11c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d161      	bne.n	80065a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064e4:	4b35      	ldr	r3, [pc, #212]	@ (80065bc <xTaskResumeAll+0x120>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d05d      	beq.n	80065a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ec:	e02e      	b.n	800654c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ee:	4b34      	ldr	r3, [pc, #208]	@ (80065c0 <xTaskResumeAll+0x124>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3318      	adds	r3, #24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fd58 	bl	8005fb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3304      	adds	r3, #4
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fd53 	bl	8005fb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650e:	2201      	movs	r2, #1
 8006510:	409a      	lsls	r2, r3
 8006512:	4b2c      	ldr	r3, [pc, #176]	@ (80065c4 <xTaskResumeAll+0x128>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4313      	orrs	r3, r2
 8006518:	4a2a      	ldr	r2, [pc, #168]	@ (80065c4 <xTaskResumeAll+0x128>)
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4a27      	ldr	r2, [pc, #156]	@ (80065c8 <xTaskResumeAll+0x12c>)
 800652a:	441a      	add	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7ff fcdf 	bl	8005ef6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653c:	4b23      	ldr	r3, [pc, #140]	@ (80065cc <xTaskResumeAll+0x130>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006546:	4b22      	ldr	r3, [pc, #136]	@ (80065d0 <xTaskResumeAll+0x134>)
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800654c:	4b1c      	ldr	r3, [pc, #112]	@ (80065c0 <xTaskResumeAll+0x124>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1cc      	bne.n	80064ee <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800655a:	f000 fa11 	bl	8006980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800655e:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <xTaskResumeAll+0x138>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d010      	beq.n	800658c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800656a:	f000 f837 	bl	80065dc <xTaskIncrementTick>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006574:	4b16      	ldr	r3, [pc, #88]	@ (80065d0 <xTaskResumeAll+0x134>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3b01      	subs	r3, #1
 800657e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f1      	bne.n	800656a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006586:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <xTaskResumeAll+0x138>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800658c:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <xTaskResumeAll+0x134>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006594:	2301      	movs	r3, #1
 8006596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006598:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <xTaskResumeAll+0x13c>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065a8:	f000 fbd6 	bl	8006d58 <vPortExitCritical>

	return xAlreadyYielded;
 80065ac:	68bb      	ldr	r3, [r7, #8]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000560 	.word	0x20000560
 80065bc:	20000538 	.word	0x20000538
 80065c0:	200004f8 	.word	0x200004f8
 80065c4:	20000540 	.word	0x20000540
 80065c8:	2000043c 	.word	0x2000043c
 80065cc:	20000438 	.word	0x20000438
 80065d0:	2000054c 	.word	0x2000054c
 80065d4:	20000548 	.word	0x20000548
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e6:	4b50      	ldr	r3, [pc, #320]	@ (8006728 <xTaskIncrementTick+0x14c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 808b 	bne.w	8006706 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065f0:	4b4e      	ldr	r3, [pc, #312]	@ (800672c <xTaskIncrementTick+0x150>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065f8:	4a4c      	ldr	r2, [pc, #304]	@ (800672c <xTaskIncrementTick+0x150>)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d123      	bne.n	800664c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006604:	4b4a      	ldr	r3, [pc, #296]	@ (8006730 <xTaskIncrementTick+0x154>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <xTaskIncrementTick+0x4e>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	b672      	cpsid	i
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	b662      	cpsie	i
 8006622:	603b      	str	r3, [r7, #0]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <xTaskIncrementTick+0x4a>
 800662a:	4b41      	ldr	r3, [pc, #260]	@ (8006730 <xTaskIncrementTick+0x154>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	4b40      	ldr	r3, [pc, #256]	@ (8006734 <xTaskIncrementTick+0x158>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a3e      	ldr	r2, [pc, #248]	@ (8006730 <xTaskIncrementTick+0x154>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4a3e      	ldr	r2, [pc, #248]	@ (8006734 <xTaskIncrementTick+0x158>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b3e      	ldr	r3, [pc, #248]	@ (8006738 <xTaskIncrementTick+0x15c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a3c      	ldr	r2, [pc, #240]	@ (8006738 <xTaskIncrementTick+0x15c>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	f000 f99a 	bl	8006980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800664c:	4b3b      	ldr	r3, [pc, #236]	@ (800673c <xTaskIncrementTick+0x160>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	d348      	bcc.n	80066e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006656:	4b36      	ldr	r3, [pc, #216]	@ (8006730 <xTaskIncrementTick+0x154>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006660:	4b36      	ldr	r3, [pc, #216]	@ (800673c <xTaskIncrementTick+0x160>)
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	601a      	str	r2, [r3, #0]
					break;
 8006668:	e03e      	b.n	80066e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666a:	4b31      	ldr	r3, [pc, #196]	@ (8006730 <xTaskIncrementTick+0x154>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d203      	bcs.n	800668a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006682:	4a2e      	ldr	r2, [pc, #184]	@ (800673c <xTaskIncrementTick+0x160>)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006688:	e02e      	b.n	80066e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3304      	adds	r3, #4
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fc8e 	bl	8005fb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	3318      	adds	r3, #24
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fc85 	bl	8005fb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	2201      	movs	r2, #1
 80066ac:	409a      	lsls	r2, r3
 80066ae:	4b24      	ldr	r3, [pc, #144]	@ (8006740 <xTaskIncrementTick+0x164>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <xTaskIncrementTick+0x164>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <xTaskIncrementTick+0x168>)
 80066c6:	441a      	add	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7ff fc11 	bl	8005ef6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <xTaskIncrementTick+0x16c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d3b9      	bcc.n	8006656 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80066e2:	2301      	movs	r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e6:	e7b6      	b.n	8006656 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066e8:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <xTaskIncrementTick+0x16c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ee:	4915      	ldr	r1, [pc, #84]	@ (8006744 <xTaskIncrementTick+0x168>)
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d907      	bls.n	8006710 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	e004      	b.n	8006710 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006706:	4b11      	ldr	r3, [pc, #68]	@ (800674c <xTaskIncrementTick+0x170>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	4a0f      	ldr	r2, [pc, #60]	@ (800674c <xTaskIncrementTick+0x170>)
 800670e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006710:	4b0f      	ldr	r3, [pc, #60]	@ (8006750 <xTaskIncrementTick+0x174>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000560 	.word	0x20000560
 800672c:	2000053c 	.word	0x2000053c
 8006730:	200004f0 	.word	0x200004f0
 8006734:	200004f4 	.word	0x200004f4
 8006738:	20000550 	.word	0x20000550
 800673c:	20000558 	.word	0x20000558
 8006740:	20000540 	.word	0x20000540
 8006744:	2000043c 	.word	0x2000043c
 8006748:	20000438 	.word	0x20000438
 800674c:	20000548 	.word	0x20000548
 8006750:	2000054c 	.word	0x2000054c

08006754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800675a:	4b28      	ldr	r3, [pc, #160]	@ (80067fc <vTaskSwitchContext+0xa8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006762:	4b27      	ldr	r3, [pc, #156]	@ (8006800 <vTaskSwitchContext+0xac>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006768:	e042      	b.n	80067f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800676a:	4b25      	ldr	r3, [pc, #148]	@ (8006800 <vTaskSwitchContext+0xac>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006770:	4b24      	ldr	r3, [pc, #144]	@ (8006804 <vTaskSwitchContext+0xb0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	fab3 f383 	clz	r3, r3
 800677c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	f1c3 031f 	rsb	r3, r3, #31
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	4920      	ldr	r1, [pc, #128]	@ (8006808 <vTaskSwitchContext+0xb4>)
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <vTaskSwitchContext+0x62>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	b672      	cpsid	i
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	b662      	cpsie	i
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	e7fd      	b.n	80067b2 <vTaskSwitchContext+0x5e>
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4a11      	ldr	r2, [pc, #68]	@ (8006808 <vTaskSwitchContext+0xb4>)
 80067c2:	4413      	add	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	3308      	adds	r3, #8
 80067d8:	429a      	cmp	r2, r3
 80067da:	d104      	bne.n	80067e6 <vTaskSwitchContext+0x92>
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	605a      	str	r2, [r3, #4]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4a07      	ldr	r2, [pc, #28]	@ (800680c <vTaskSwitchContext+0xb8>)
 80067ee:	6013      	str	r3, [r2, #0]
}
 80067f0:	bf00      	nop
 80067f2:	371c      	adds	r7, #28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000560 	.word	0x20000560
 8006800:	2000054c 	.word	0x2000054c
 8006804:	20000540 	.word	0x20000540
 8006808:	2000043c 	.word	0x2000043c
 800680c:	20000438 	.word	0x20000438

08006810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006818:	f000 f852 	bl	80068c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <prvIdleTask+0x28>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d9f9      	bls.n	8006818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006824:	4b05      	ldr	r3, [pc, #20]	@ (800683c <prvIdleTask+0x2c>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006834:	e7f0      	b.n	8006818 <prvIdleTask+0x8>
 8006836:	bf00      	nop
 8006838:	2000043c 	.word	0x2000043c
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	e00c      	b.n	8006866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4a12      	ldr	r2, [pc, #72]	@ (80068a0 <prvInitialiseTaskLists+0x60>)
 8006858:	4413      	add	r3, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fb1e 	bl	8005e9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3301      	adds	r3, #1
 8006864:	607b      	str	r3, [r7, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b06      	cmp	r3, #6
 800686a:	d9ef      	bls.n	800684c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800686c:	480d      	ldr	r0, [pc, #52]	@ (80068a4 <prvInitialiseTaskLists+0x64>)
 800686e:	f7ff fb15 	bl	8005e9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006872:	480d      	ldr	r0, [pc, #52]	@ (80068a8 <prvInitialiseTaskLists+0x68>)
 8006874:	f7ff fb12 	bl	8005e9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006878:	480c      	ldr	r0, [pc, #48]	@ (80068ac <prvInitialiseTaskLists+0x6c>)
 800687a:	f7ff fb0f 	bl	8005e9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800687e:	480c      	ldr	r0, [pc, #48]	@ (80068b0 <prvInitialiseTaskLists+0x70>)
 8006880:	f7ff fb0c 	bl	8005e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006884:	480b      	ldr	r0, [pc, #44]	@ (80068b4 <prvInitialiseTaskLists+0x74>)
 8006886:	f7ff fb09 	bl	8005e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800688a:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <prvInitialiseTaskLists+0x78>)
 800688c:	4a05      	ldr	r2, [pc, #20]	@ (80068a4 <prvInitialiseTaskLists+0x64>)
 800688e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006890:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <prvInitialiseTaskLists+0x7c>)
 8006892:	4a05      	ldr	r2, [pc, #20]	@ (80068a8 <prvInitialiseTaskLists+0x68>)
 8006894:	601a      	str	r2, [r3, #0]
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	2000043c 	.word	0x2000043c
 80068a4:	200004c8 	.word	0x200004c8
 80068a8:	200004dc 	.word	0x200004dc
 80068ac:	200004f8 	.word	0x200004f8
 80068b0:	2000050c 	.word	0x2000050c
 80068b4:	20000524 	.word	0x20000524
 80068b8:	200004f0 	.word	0x200004f0
 80068bc:	200004f4 	.word	0x200004f4

080068c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c6:	e019      	b.n	80068fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068c8:	f000 fa10 	bl	8006cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068cc:	4b10      	ldr	r3, [pc, #64]	@ (8006910 <prvCheckTasksWaitingTermination+0x50>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3304      	adds	r3, #4
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fb69 	bl	8005fb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068de:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <prvCheckTasksWaitingTermination+0x54>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006914 <prvCheckTasksWaitingTermination+0x54>)
 80068e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <prvCheckTasksWaitingTermination+0x58>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006918 <prvCheckTasksWaitingTermination+0x58>)
 80068f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068f2:	f000 fa31 	bl	8006d58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f810 	bl	800691c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <prvCheckTasksWaitingTermination+0x58>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e1      	bne.n	80068c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	2000050c 	.word	0x2000050c
 8006914:	20000538 	.word	0x20000538
 8006918:	20000520 	.word	0x20000520

0800691c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800692a:	2b00      	cmp	r3, #0
 800692c:	d108      	bne.n	8006940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fb90 	bl	8007058 <vPortFree>
				vPortFree( pxTCB );
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb8d 	bl	8007058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800693e:	e01b      	b.n	8006978 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006946:	2b01      	cmp	r3, #1
 8006948:	d103      	bne.n	8006952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb84 	bl	8007058 <vPortFree>
	}
 8006950:	e012      	b.n	8006978 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006958:	2b02      	cmp	r3, #2
 800695a:	d00d      	beq.n	8006978 <prvDeleteTCB+0x5c>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	b672      	cpsid	i
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	b662      	cpsie	i
 8006970:	60fb      	str	r3, [r7, #12]
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <prvDeleteTCB+0x58>
	}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006986:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <prvResetNextTaskUnblockTime+0x38>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006990:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <prvResetNextTaskUnblockTime+0x3c>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006998:	e008      	b.n	80069ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699a:	4b07      	ldr	r3, [pc, #28]	@ (80069b8 <prvResetNextTaskUnblockTime+0x38>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4a04      	ldr	r2, [pc, #16]	@ (80069bc <prvResetNextTaskUnblockTime+0x3c>)
 80069aa:	6013      	str	r3, [r2, #0]
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	200004f0 	.word	0x200004f0
 80069bc:	20000558 	.word	0x20000558

080069c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069c6:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <xTaskGetSchedulerState+0x34>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069ce:	2301      	movs	r3, #1
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	e008      	b.n	80069e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d4:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <xTaskGetSchedulerState+0x38>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069dc:	2302      	movs	r3, #2
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	e001      	b.n	80069e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069e6:	687b      	ldr	r3, [r7, #4]
	}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	20000544 	.word	0x20000544
 80069f8:	20000560 	.word	0x20000560

080069fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b29      	ldr	r3, [pc, #164]	@ (8006aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a0c:	4b28      	ldr	r3, [pc, #160]	@ (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff facc 	bl	8005fb0 <uxListRemove>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a1e:	4b24      	ldr	r3, [pc, #144]	@ (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	2201      	movs	r2, #1
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43da      	mvns	r2, r3
 8006a2c:	4b21      	ldr	r3, [pc, #132]	@ (8006ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4013      	ands	r3, r2
 8006a32:	4a20      	ldr	r2, [pc, #128]	@ (8006ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d10a      	bne.n	8006a54 <prvAddCurrentTaskToDelayedList+0x58>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a44:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	481a      	ldr	r0, [pc, #104]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a4e:	f7ff fa52 	bl	8005ef6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a52:	e026      	b.n	8006aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a5c:	4b14      	ldr	r3, [pc, #80]	@ (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d209      	bcs.n	8006a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a6c:	4b13      	ldr	r3, [pc, #76]	@ (8006abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f7ff fa60 	bl	8005f3e <vListInsert>
}
 8006a7e:	e010      	b.n	8006aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f7ff fa56 	bl	8005f3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a92:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d202      	bcs.n	8006aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a9c:	4a09      	ldr	r2, [pc, #36]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6013      	str	r3, [r2, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	2000053c 	.word	0x2000053c
 8006ab0:	20000438 	.word	0x20000438
 8006ab4:	20000540 	.word	0x20000540
 8006ab8:	20000524 	.word	0x20000524
 8006abc:	200004f4 	.word	0x200004f4
 8006ac0:	200004f0 	.word	0x200004f0
 8006ac4:	20000558 	.word	0x20000558

08006ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3b04      	subs	r3, #4
 8006ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f023 0201 	bic.w	r2, r3, #1
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3b04      	subs	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006af8:	4a0c      	ldr	r2, [pc, #48]	@ (8006b2c <pxPortInitialiseStack+0x64>)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3b14      	subs	r3, #20
 8006b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3b04      	subs	r3, #4
 8006b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f06f 0202 	mvn.w	r2, #2
 8006b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b20      	subs	r3, #32
 8006b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	08006b31 	.word	0x08006b31

08006b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b3a:	4b15      	ldr	r3, [pc, #84]	@ (8006b90 <prvTaskExitError+0x60>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d00d      	beq.n	8006b60 <prvTaskExitError+0x30>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	b672      	cpsid	i
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	b662      	cpsie	i
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	bf00      	nop
 8006b5e:	e7fd      	b.n	8006b5c <prvTaskExitError+0x2c>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	b672      	cpsid	i
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	b662      	cpsie	i
 8006b74:	60bb      	str	r3, [r7, #8]
}
 8006b76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b78:	bf00      	nop
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0fc      	beq.n	8006b7a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000000c 	.word	0x2000000c
	...

08006ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ba0:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <pxCurrentTCBConst2>)
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	6808      	ldr	r0, [r1, #0]
 8006ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	f380 8809 	msr	PSP, r0
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f04f 0000 	mov.w	r0, #0
 8006bb6:	f380 8811 	msr	BASEPRI, r0
 8006bba:	4770      	bx	lr
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst2>:
 8006bc0:	20000438 	.word	0x20000438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bc8:	4808      	ldr	r0, [pc, #32]	@ (8006bec <prvPortStartFirstTask+0x24>)
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	6800      	ldr	r0, [r0, #0]
 8006bce:	f380 8808 	msr	MSP, r0
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8814 	msr	CONTROL, r0
 8006bda:	b662      	cpsie	i
 8006bdc:	b661      	cpsie	f
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	df00      	svc	0
 8006be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bea:	bf00      	nop
 8006bec:	e000ed08 	.word	0xe000ed08

08006bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bf6:	4b37      	ldr	r3, [pc, #220]	@ (8006cd4 <xPortStartScheduler+0xe4>)
 8006bf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	22ff      	movs	r2, #255	@ 0xff
 8006c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd8 <xPortStartScheduler+0xe8>)
 8006c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c20:	2207      	movs	r2, #7
 8006c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c24:	e009      	b.n	8006c3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c26:	4b2d      	ldr	r3, [pc, #180]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c42:	2b80      	cmp	r3, #128	@ 0x80
 8006c44:	d0ef      	beq.n	8006c26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c46:	4b25      	ldr	r3, [pc, #148]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f1c3 0307 	rsb	r3, r3, #7
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d00d      	beq.n	8006c6e <xPortStartScheduler+0x7e>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	b672      	cpsid	i
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	b662      	cpsie	i
 8006c66:	60bb      	str	r3, [r7, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	4a19      	ldr	r2, [pc, #100]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c78:	4b18      	ldr	r3, [pc, #96]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c80:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <xPortStartScheduler+0xec>)
 8006c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c8c:	4b14      	ldr	r3, [pc, #80]	@ (8006ce0 <xPortStartScheduler+0xf0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <xPortStartScheduler+0xf0>)
 8006c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c98:	4b11      	ldr	r3, [pc, #68]	@ (8006ce0 <xPortStartScheduler+0xf0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a10      	ldr	r2, [pc, #64]	@ (8006ce0 <xPortStartScheduler+0xf0>)
 8006c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ca4:	f000 f8dc 	bl	8006e60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce4 <xPortStartScheduler+0xf4>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cae:	f000 f8fb 	bl	8006ea8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <xPortStartScheduler+0xf8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ce8 <xPortStartScheduler+0xf8>)
 8006cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cbe:	f7ff ff83 	bl	8006bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cc2:	f7ff fd47 	bl	8006754 <vTaskSwitchContext>
	prvTaskExitError();
 8006cc6:	f7ff ff33 	bl	8006b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	e000e400 	.word	0xe000e400
 8006cd8:	20000564 	.word	0x20000564
 8006cdc:	20000568 	.word	0x20000568
 8006ce0:	e000ed20 	.word	0xe000ed20
 8006ce4:	2000000c 	.word	0x2000000c
 8006ce8:	e000ef34 	.word	0xe000ef34

08006cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	b672      	cpsid	i
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	b662      	cpsie	i
 8006d06:	607b      	str	r3, [r7, #4]
}
 8006d08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d0a:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <vPortEnterCritical+0x64>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	4a0f      	ldr	r2, [pc, #60]	@ (8006d50 <vPortEnterCritical+0x64>)
 8006d12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d14:	4b0e      	ldr	r3, [pc, #56]	@ (8006d50 <vPortEnterCritical+0x64>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d112      	bne.n	8006d42 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <vPortEnterCritical+0x68>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <vPortEnterCritical+0x56>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	b672      	cpsid	i
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	b662      	cpsie	i
 8006d3a:	603b      	str	r3, [r7, #0]
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <vPortEnterCritical+0x52>
	}
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	2000000c 	.word	0x2000000c
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d5e:	4b13      	ldr	r3, [pc, #76]	@ (8006dac <vPortExitCritical+0x54>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <vPortExitCritical+0x2a>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	607b      	str	r3, [r7, #4]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006d82:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <vPortExitCritical+0x54>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	4a08      	ldr	r2, [pc, #32]	@ (8006dac <vPortExitCritical+0x54>)
 8006d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d8c:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <vPortExitCritical+0x54>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <vPortExitCritical+0x48>
 8006d94:	2300      	movs	r3, #0
 8006d96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	2000000c 	.word	0x2000000c

08006db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006db0:	f3ef 8009 	mrs	r0, PSP
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <pxCurrentTCBConst>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f01e 0f10 	tst.w	lr, #16
 8006dc0:	bf08      	it	eq
 8006dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	6010      	str	r0, [r2, #0]
 8006dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006dd4:	b672      	cpsid	i
 8006dd6:	f380 8811 	msr	BASEPRI, r0
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	b662      	cpsie	i
 8006de4:	f7ff fcb6 	bl	8006754 <vTaskSwitchContext>
 8006de8:	f04f 0000 	mov.w	r0, #0
 8006dec:	f380 8811 	msr	BASEPRI, r0
 8006df0:	bc09      	pop	{r0, r3}
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	6808      	ldr	r0, [r1, #0]
 8006df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfa:	f01e 0f10 	tst.w	lr, #16
 8006dfe:	bf08      	it	eq
 8006e00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e04:	f380 8809 	msr	PSP, r0
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop

08006e10 <pxCurrentTCBConst>:
 8006e10:	20000438 	.word	0x20000438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	b672      	cpsid	i
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	b662      	cpsie	i
 8006e32:	607b      	str	r3, [r7, #4]
}
 8006e34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e36:	f7ff fbd1 	bl	80065dc <xTaskIncrementTick>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e40:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <xPortSysTickHandler+0x44>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	f383 8811 	msr	BASEPRI, r3
}
 8006e52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	e000ed04 	.word	0xe000ed04

08006e60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e64:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <vPortSetupTimerInterrupt+0x34>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <vPortSetupTimerInterrupt+0x38>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e70:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <vPortSetupTimerInterrupt+0x3c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea0 <vPortSetupTimerInterrupt+0x40>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	099b      	lsrs	r3, r3, #6
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <vPortSetupTimerInterrupt+0x44>)
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e82:	4b04      	ldr	r3, [pc, #16]	@ (8006e94 <vPortSetupTimerInterrupt+0x34>)
 8006e84:	2207      	movs	r2, #7
 8006e86:	601a      	str	r2, [r3, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	e000e010 	.word	0xe000e010
 8006e98:	e000e018 	.word	0xe000e018
 8006e9c:	20000000 	.word	0x20000000
 8006ea0:	10624dd3 	.word	0x10624dd3
 8006ea4:	e000e014 	.word	0xe000e014

08006ea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ea8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006eb8 <vPortEnableVFP+0x10>
 8006eac:	6801      	ldr	r1, [r0, #0]
 8006eae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006eb2:	6001      	str	r1, [r0, #0]
 8006eb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006eb6:	bf00      	nop
 8006eb8:	e000ed88 	.word	0xe000ed88

08006ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec8:	f7ff fada 	bl	8006480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8007044 <pvPortMalloc+0x188>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed4:	f000 f920 	bl	8007118 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed8:	4b5b      	ldr	r3, [pc, #364]	@ (8007048 <pvPortMalloc+0x18c>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 8094 	bne.w	800700e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d020      	beq.n	8006f2e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006eec:	2208      	movs	r2, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d017      	beq.n	8006f2e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	3308      	adds	r3, #8
 8006f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <pvPortMalloc+0x72>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	b672      	cpsid	i
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	b662      	cpsie	i
 8006f26:	617b      	str	r3, [r7, #20]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d06c      	beq.n	800700e <pvPortMalloc+0x152>
 8006f34:	4b45      	ldr	r3, [pc, #276]	@ (800704c <pvPortMalloc+0x190>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d867      	bhi.n	800700e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f3e:	4b44      	ldr	r3, [pc, #272]	@ (8007050 <pvPortMalloc+0x194>)
 8006f40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f42:	4b43      	ldr	r3, [pc, #268]	@ (8007050 <pvPortMalloc+0x194>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f48:	e004      	b.n	8006f54 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d903      	bls.n	8006f66 <pvPortMalloc+0xaa>
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f1      	bne.n	8006f4a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f66:	4b37      	ldr	r3, [pc, #220]	@ (8007044 <pvPortMalloc+0x188>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d04e      	beq.n	800700e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	4413      	add	r3, r2
 8006f78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d922      	bls.n	8006fd8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4413      	add	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <pvPortMalloc+0x104>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	b672      	cpsid	i
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	b662      	cpsie	i
 8006fb8:	613b      	str	r3, [r7, #16]
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	e7fd      	b.n	8006fbc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fd2:	69b8      	ldr	r0, [r7, #24]
 8006fd4:	f000 f902 	bl	80071dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800704c <pvPortMalloc+0x190>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800704c <pvPortMalloc+0x190>)
 8006fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fe6:	4b19      	ldr	r3, [pc, #100]	@ (800704c <pvPortMalloc+0x190>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b1a      	ldr	r3, [pc, #104]	@ (8007054 <pvPortMalloc+0x198>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d203      	bcs.n	8006ffa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ff2:	4b16      	ldr	r3, [pc, #88]	@ (800704c <pvPortMalloc+0x190>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	@ (8007054 <pvPortMalloc+0x198>)
 8006ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	4b12      	ldr	r3, [pc, #72]	@ (8007048 <pvPortMalloc+0x18c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	431a      	orrs	r2, r3
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800700e:	f7ff fa45 	bl	800649c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <pvPortMalloc+0x17c>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	b672      	cpsid	i
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	b662      	cpsie	i
 8007030:	60fb      	str	r3, [r7, #12]
}
 8007032:	bf00      	nop
 8007034:	bf00      	nop
 8007036:	e7fd      	b.n	8007034 <pvPortMalloc+0x178>
	return pvReturn;
 8007038:	69fb      	ldr	r3, [r7, #28]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3728      	adds	r7, #40	@ 0x28
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20004174 	.word	0x20004174
 8007048:	20004180 	.word	0x20004180
 800704c:	20004178 	.word	0x20004178
 8007050:	2000416c 	.word	0x2000416c
 8007054:	2000417c 	.word	0x2000417c

08007058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d04e      	beq.n	8007108 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800706a:	2308      	movs	r3, #8
 800706c:	425b      	negs	r3, r3
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4413      	add	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b24      	ldr	r3, [pc, #144]	@ (8007110 <vPortFree+0xb8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10d      	bne.n	80070a2 <vPortFree+0x4a>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	b672      	cpsid	i
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	b662      	cpsie	i
 800709a:	60fb      	str	r3, [r7, #12]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <vPortFree+0x6e>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	b672      	cpsid	i
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	b662      	cpsie	i
 80070be:	60bb      	str	r3, [r7, #8]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <vPortFree+0xb8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d019      	beq.n	8007108 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d115      	bne.n	8007108 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <vPortFree+0xb8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	401a      	ands	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070ec:	f7ff f9c8 	bl	8006480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <vPortFree+0xbc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4413      	add	r3, r2
 80070fa:	4a06      	ldr	r2, [pc, #24]	@ (8007114 <vPortFree+0xbc>)
 80070fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070fe:	6938      	ldr	r0, [r7, #16]
 8007100:	f000 f86c 	bl	80071dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007104:	f7ff f9ca 	bl	800649c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007108:	bf00      	nop
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20004180 	.word	0x20004180
 8007114:	20004178 	.word	0x20004178

08007118 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800711e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007122:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007124:	4b27      	ldr	r3, [pc, #156]	@ (80071c4 <prvHeapInit+0xac>)
 8007126:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00c      	beq.n	800714c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3307      	adds	r3, #7
 8007136:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0307 	bic.w	r3, r3, #7
 800713e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	4a1f      	ldr	r2, [pc, #124]	@ (80071c4 <prvHeapInit+0xac>)
 8007148:	4413      	add	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007150:	4a1d      	ldr	r2, [pc, #116]	@ (80071c8 <prvHeapInit+0xb0>)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007156:	4b1c      	ldr	r3, [pc, #112]	@ (80071c8 <prvHeapInit+0xb0>)
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007164:	2208      	movs	r2, #8
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0307 	bic.w	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a15      	ldr	r2, [pc, #84]	@ (80071cc <prvHeapInit+0xb4>)
 8007178:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800717a:	4b14      	ldr	r3, [pc, #80]	@ (80071cc <prvHeapInit+0xb4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2200      	movs	r2, #0
 8007180:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <prvHeapInit+0xb4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007198:	4b0c      	ldr	r3, [pc, #48]	@ (80071cc <prvHeapInit+0xb4>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4a0a      	ldr	r2, [pc, #40]	@ (80071d0 <prvHeapInit+0xb8>)
 80071a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4a09      	ldr	r2, [pc, #36]	@ (80071d4 <prvHeapInit+0xbc>)
 80071ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071b0:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <prvHeapInit+0xc0>)
 80071b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071b6:	601a      	str	r2, [r3, #0]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	2000056c 	.word	0x2000056c
 80071c8:	2000416c 	.word	0x2000416c
 80071cc:	20004174 	.word	0x20004174
 80071d0:	2000417c 	.word	0x2000417c
 80071d4:	20004178 	.word	0x20004178
 80071d8:	20004180 	.word	0x20004180

080071dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071e4:	4b28      	ldr	r3, [pc, #160]	@ (8007288 <prvInsertBlockIntoFreeList+0xac>)
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e002      	b.n	80071f0 <prvInsertBlockIntoFreeList+0x14>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d8f7      	bhi.n	80071ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	4413      	add	r3, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d108      	bne.n	800721e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	441a      	add	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	441a      	add	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d118      	bne.n	8007264 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b15      	ldr	r3, [pc, #84]	@ (800728c <prvInsertBlockIntoFreeList+0xb0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d00d      	beq.n	800725a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	441a      	add	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e008      	b.n	800726c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800725a:	4b0c      	ldr	r3, [pc, #48]	@ (800728c <prvInsertBlockIntoFreeList+0xb0>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e003      	b.n	800726c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d002      	beq.n	800727a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800727a:	bf00      	nop
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	2000416c 	.word	0x2000416c
 800728c:	20004174 	.word	0x20004174

08007290 <siprintf>:
 8007290:	b40e      	push	{r1, r2, r3}
 8007292:	b500      	push	{lr}
 8007294:	b09c      	sub	sp, #112	@ 0x70
 8007296:	ab1d      	add	r3, sp, #116	@ 0x74
 8007298:	9002      	str	r0, [sp, #8]
 800729a:	9006      	str	r0, [sp, #24]
 800729c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072a0:	4809      	ldr	r0, [pc, #36]	@ (80072c8 <siprintf+0x38>)
 80072a2:	9107      	str	r1, [sp, #28]
 80072a4:	9104      	str	r1, [sp, #16]
 80072a6:	4909      	ldr	r1, [pc, #36]	@ (80072cc <siprintf+0x3c>)
 80072a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	a902      	add	r1, sp, #8
 80072b4:	f000 f9a2 	bl	80075fc <_svfiprintf_r>
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	b01c      	add	sp, #112	@ 0x70
 80072c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c4:	b003      	add	sp, #12
 80072c6:	4770      	bx	lr
 80072c8:	20000010 	.word	0x20000010
 80072cc:	ffff0208 	.word	0xffff0208

080072d0 <memset>:
 80072d0:	4402      	add	r2, r0
 80072d2:	4603      	mov	r3, r0
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d100      	bne.n	80072da <memset+0xa>
 80072d8:	4770      	bx	lr
 80072da:	f803 1b01 	strb.w	r1, [r3], #1
 80072de:	e7f9      	b.n	80072d4 <memset+0x4>

080072e0 <__errno>:
 80072e0:	4b01      	ldr	r3, [pc, #4]	@ (80072e8 <__errno+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000010 	.word	0x20000010

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007324 <__libc_init_array+0x38>)
 80072f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007328 <__libc_init_array+0x3c>)
 80072f2:	1b64      	subs	r4, r4, r5
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	2600      	movs	r6, #0
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	4d0b      	ldr	r5, [pc, #44]	@ (800732c <__libc_init_array+0x40>)
 80072fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007330 <__libc_init_array+0x44>)
 8007300:	f000 fc66 	bl	8007bd0 <_init>
 8007304:	1b64      	subs	r4, r4, r5
 8007306:	10a4      	asrs	r4, r4, #2
 8007308:	2600      	movs	r6, #0
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	08007d48 	.word	0x08007d48
 8007328:	08007d48 	.word	0x08007d48
 800732c:	08007d48 	.word	0x08007d48
 8007330:	08007d4c 	.word	0x08007d4c

08007334 <__retarget_lock_acquire_recursive>:
 8007334:	4770      	bx	lr

08007336 <__retarget_lock_release_recursive>:
 8007336:	4770      	bx	lr

08007338 <memcpy>:
 8007338:	440a      	add	r2, r1
 800733a:	4291      	cmp	r1, r2
 800733c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007340:	d100      	bne.n	8007344 <memcpy+0xc>
 8007342:	4770      	bx	lr
 8007344:	b510      	push	{r4, lr}
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800734e:	4291      	cmp	r1, r2
 8007350:	d1f9      	bne.n	8007346 <memcpy+0xe>
 8007352:	bd10      	pop	{r4, pc}

08007354 <_free_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	2900      	cmp	r1, #0
 800735a:	d041      	beq.n	80073e0 <_free_r+0x8c>
 800735c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007360:	1f0c      	subs	r4, r1, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	bfb8      	it	lt
 8007366:	18e4      	addlt	r4, r4, r3
 8007368:	f000 f8e0 	bl	800752c <__malloc_lock>
 800736c:	4a1d      	ldr	r2, [pc, #116]	@ (80073e4 <_free_r+0x90>)
 800736e:	6813      	ldr	r3, [r2, #0]
 8007370:	b933      	cbnz	r3, 8007380 <_free_r+0x2c>
 8007372:	6063      	str	r3, [r4, #4]
 8007374:	6014      	str	r4, [r2, #0]
 8007376:	4628      	mov	r0, r5
 8007378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800737c:	f000 b8dc 	b.w	8007538 <__malloc_unlock>
 8007380:	42a3      	cmp	r3, r4
 8007382:	d908      	bls.n	8007396 <_free_r+0x42>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	1821      	adds	r1, r4, r0
 8007388:	428b      	cmp	r3, r1
 800738a:	bf01      	itttt	eq
 800738c:	6819      	ldreq	r1, [r3, #0]
 800738e:	685b      	ldreq	r3, [r3, #4]
 8007390:	1809      	addeq	r1, r1, r0
 8007392:	6021      	streq	r1, [r4, #0]
 8007394:	e7ed      	b.n	8007372 <_free_r+0x1e>
 8007396:	461a      	mov	r2, r3
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	b10b      	cbz	r3, 80073a0 <_free_r+0x4c>
 800739c:	42a3      	cmp	r3, r4
 800739e:	d9fa      	bls.n	8007396 <_free_r+0x42>
 80073a0:	6811      	ldr	r1, [r2, #0]
 80073a2:	1850      	adds	r0, r2, r1
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d10b      	bne.n	80073c0 <_free_r+0x6c>
 80073a8:	6820      	ldr	r0, [r4, #0]
 80073aa:	4401      	add	r1, r0
 80073ac:	1850      	adds	r0, r2, r1
 80073ae:	4283      	cmp	r3, r0
 80073b0:	6011      	str	r1, [r2, #0]
 80073b2:	d1e0      	bne.n	8007376 <_free_r+0x22>
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	6053      	str	r3, [r2, #4]
 80073ba:	4408      	add	r0, r1
 80073bc:	6010      	str	r0, [r2, #0]
 80073be:	e7da      	b.n	8007376 <_free_r+0x22>
 80073c0:	d902      	bls.n	80073c8 <_free_r+0x74>
 80073c2:	230c      	movs	r3, #12
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	e7d6      	b.n	8007376 <_free_r+0x22>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	1821      	adds	r1, r4, r0
 80073cc:	428b      	cmp	r3, r1
 80073ce:	bf04      	itt	eq
 80073d0:	6819      	ldreq	r1, [r3, #0]
 80073d2:	685b      	ldreq	r3, [r3, #4]
 80073d4:	6063      	str	r3, [r4, #4]
 80073d6:	bf04      	itt	eq
 80073d8:	1809      	addeq	r1, r1, r0
 80073da:	6021      	streq	r1, [r4, #0]
 80073dc:	6054      	str	r4, [r2, #4]
 80073de:	e7ca      	b.n	8007376 <_free_r+0x22>
 80073e0:	bd38      	pop	{r3, r4, r5, pc}
 80073e2:	bf00      	nop
 80073e4:	200042c8 	.word	0x200042c8

080073e8 <sbrk_aligned>:
 80073e8:	b570      	push	{r4, r5, r6, lr}
 80073ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007428 <sbrk_aligned+0x40>)
 80073ec:	460c      	mov	r4, r1
 80073ee:	6831      	ldr	r1, [r6, #0]
 80073f0:	4605      	mov	r5, r0
 80073f2:	b911      	cbnz	r1, 80073fa <sbrk_aligned+0x12>
 80073f4:	f000 fba6 	bl	8007b44 <_sbrk_r>
 80073f8:	6030      	str	r0, [r6, #0]
 80073fa:	4621      	mov	r1, r4
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 fba1 	bl	8007b44 <_sbrk_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d103      	bne.n	800740e <sbrk_aligned+0x26>
 8007406:	f04f 34ff 	mov.w	r4, #4294967295
 800740a:	4620      	mov	r0, r4
 800740c:	bd70      	pop	{r4, r5, r6, pc}
 800740e:	1cc4      	adds	r4, r0, #3
 8007410:	f024 0403 	bic.w	r4, r4, #3
 8007414:	42a0      	cmp	r0, r4
 8007416:	d0f8      	beq.n	800740a <sbrk_aligned+0x22>
 8007418:	1a21      	subs	r1, r4, r0
 800741a:	4628      	mov	r0, r5
 800741c:	f000 fb92 	bl	8007b44 <_sbrk_r>
 8007420:	3001      	adds	r0, #1
 8007422:	d1f2      	bne.n	800740a <sbrk_aligned+0x22>
 8007424:	e7ef      	b.n	8007406 <sbrk_aligned+0x1e>
 8007426:	bf00      	nop
 8007428:	200042c4 	.word	0x200042c4

0800742c <_malloc_r>:
 800742c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007430:	1ccd      	adds	r5, r1, #3
 8007432:	f025 0503 	bic.w	r5, r5, #3
 8007436:	3508      	adds	r5, #8
 8007438:	2d0c      	cmp	r5, #12
 800743a:	bf38      	it	cc
 800743c:	250c      	movcc	r5, #12
 800743e:	2d00      	cmp	r5, #0
 8007440:	4606      	mov	r6, r0
 8007442:	db01      	blt.n	8007448 <_malloc_r+0x1c>
 8007444:	42a9      	cmp	r1, r5
 8007446:	d904      	bls.n	8007452 <_malloc_r+0x26>
 8007448:	230c      	movs	r3, #12
 800744a:	6033      	str	r3, [r6, #0]
 800744c:	2000      	movs	r0, #0
 800744e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007528 <_malloc_r+0xfc>
 8007456:	f000 f869 	bl	800752c <__malloc_lock>
 800745a:	f8d8 3000 	ldr.w	r3, [r8]
 800745e:	461c      	mov	r4, r3
 8007460:	bb44      	cbnz	r4, 80074b4 <_malloc_r+0x88>
 8007462:	4629      	mov	r1, r5
 8007464:	4630      	mov	r0, r6
 8007466:	f7ff ffbf 	bl	80073e8 <sbrk_aligned>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	4604      	mov	r4, r0
 800746e:	d158      	bne.n	8007522 <_malloc_r+0xf6>
 8007470:	f8d8 4000 	ldr.w	r4, [r8]
 8007474:	4627      	mov	r7, r4
 8007476:	2f00      	cmp	r7, #0
 8007478:	d143      	bne.n	8007502 <_malloc_r+0xd6>
 800747a:	2c00      	cmp	r4, #0
 800747c:	d04b      	beq.n	8007516 <_malloc_r+0xea>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	4639      	mov	r1, r7
 8007482:	4630      	mov	r0, r6
 8007484:	eb04 0903 	add.w	r9, r4, r3
 8007488:	f000 fb5c 	bl	8007b44 <_sbrk_r>
 800748c:	4581      	cmp	r9, r0
 800748e:	d142      	bne.n	8007516 <_malloc_r+0xea>
 8007490:	6821      	ldr	r1, [r4, #0]
 8007492:	1a6d      	subs	r5, r5, r1
 8007494:	4629      	mov	r1, r5
 8007496:	4630      	mov	r0, r6
 8007498:	f7ff ffa6 	bl	80073e8 <sbrk_aligned>
 800749c:	3001      	adds	r0, #1
 800749e:	d03a      	beq.n	8007516 <_malloc_r+0xea>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	442b      	add	r3, r5
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	f8d8 3000 	ldr.w	r3, [r8]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	bb62      	cbnz	r2, 8007508 <_malloc_r+0xdc>
 80074ae:	f8c8 7000 	str.w	r7, [r8]
 80074b2:	e00f      	b.n	80074d4 <_malloc_r+0xa8>
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	1b52      	subs	r2, r2, r5
 80074b8:	d420      	bmi.n	80074fc <_malloc_r+0xd0>
 80074ba:	2a0b      	cmp	r2, #11
 80074bc:	d917      	bls.n	80074ee <_malloc_r+0xc2>
 80074be:	1961      	adds	r1, r4, r5
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	6025      	str	r5, [r4, #0]
 80074c4:	bf18      	it	ne
 80074c6:	6059      	strne	r1, [r3, #4]
 80074c8:	6863      	ldr	r3, [r4, #4]
 80074ca:	bf08      	it	eq
 80074cc:	f8c8 1000 	streq.w	r1, [r8]
 80074d0:	5162      	str	r2, [r4, r5]
 80074d2:	604b      	str	r3, [r1, #4]
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f82f 	bl	8007538 <__malloc_unlock>
 80074da:	f104 000b 	add.w	r0, r4, #11
 80074de:	1d23      	adds	r3, r4, #4
 80074e0:	f020 0007 	bic.w	r0, r0, #7
 80074e4:	1ac2      	subs	r2, r0, r3
 80074e6:	bf1c      	itt	ne
 80074e8:	1a1b      	subne	r3, r3, r0
 80074ea:	50a3      	strne	r3, [r4, r2]
 80074ec:	e7af      	b.n	800744e <_malloc_r+0x22>
 80074ee:	6862      	ldr	r2, [r4, #4]
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	bf0c      	ite	eq
 80074f4:	f8c8 2000 	streq.w	r2, [r8]
 80074f8:	605a      	strne	r2, [r3, #4]
 80074fa:	e7eb      	b.n	80074d4 <_malloc_r+0xa8>
 80074fc:	4623      	mov	r3, r4
 80074fe:	6864      	ldr	r4, [r4, #4]
 8007500:	e7ae      	b.n	8007460 <_malloc_r+0x34>
 8007502:	463c      	mov	r4, r7
 8007504:	687f      	ldr	r7, [r7, #4]
 8007506:	e7b6      	b.n	8007476 <_malloc_r+0x4a>
 8007508:	461a      	mov	r2, r3
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	42a3      	cmp	r3, r4
 800750e:	d1fb      	bne.n	8007508 <_malloc_r+0xdc>
 8007510:	2300      	movs	r3, #0
 8007512:	6053      	str	r3, [r2, #4]
 8007514:	e7de      	b.n	80074d4 <_malloc_r+0xa8>
 8007516:	230c      	movs	r3, #12
 8007518:	6033      	str	r3, [r6, #0]
 800751a:	4630      	mov	r0, r6
 800751c:	f000 f80c 	bl	8007538 <__malloc_unlock>
 8007520:	e794      	b.n	800744c <_malloc_r+0x20>
 8007522:	6005      	str	r5, [r0, #0]
 8007524:	e7d6      	b.n	80074d4 <_malloc_r+0xa8>
 8007526:	bf00      	nop
 8007528:	200042c8 	.word	0x200042c8

0800752c <__malloc_lock>:
 800752c:	4801      	ldr	r0, [pc, #4]	@ (8007534 <__malloc_lock+0x8>)
 800752e:	f7ff bf01 	b.w	8007334 <__retarget_lock_acquire_recursive>
 8007532:	bf00      	nop
 8007534:	200042c0 	.word	0x200042c0

08007538 <__malloc_unlock>:
 8007538:	4801      	ldr	r0, [pc, #4]	@ (8007540 <__malloc_unlock+0x8>)
 800753a:	f7ff befc 	b.w	8007336 <__retarget_lock_release_recursive>
 800753e:	bf00      	nop
 8007540:	200042c0 	.word	0x200042c0

08007544 <__ssputs_r>:
 8007544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	688e      	ldr	r6, [r1, #8]
 800754a:	461f      	mov	r7, r3
 800754c:	42be      	cmp	r6, r7
 800754e:	680b      	ldr	r3, [r1, #0]
 8007550:	4682      	mov	sl, r0
 8007552:	460c      	mov	r4, r1
 8007554:	4690      	mov	r8, r2
 8007556:	d82d      	bhi.n	80075b4 <__ssputs_r+0x70>
 8007558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800755c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007560:	d026      	beq.n	80075b0 <__ssputs_r+0x6c>
 8007562:	6965      	ldr	r5, [r4, #20]
 8007564:	6909      	ldr	r1, [r1, #16]
 8007566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800756a:	eba3 0901 	sub.w	r9, r3, r1
 800756e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007572:	1c7b      	adds	r3, r7, #1
 8007574:	444b      	add	r3, r9
 8007576:	106d      	asrs	r5, r5, #1
 8007578:	429d      	cmp	r5, r3
 800757a:	bf38      	it	cc
 800757c:	461d      	movcc	r5, r3
 800757e:	0553      	lsls	r3, r2, #21
 8007580:	d527      	bpl.n	80075d2 <__ssputs_r+0x8e>
 8007582:	4629      	mov	r1, r5
 8007584:	f7ff ff52 	bl	800742c <_malloc_r>
 8007588:	4606      	mov	r6, r0
 800758a:	b360      	cbz	r0, 80075e6 <__ssputs_r+0xa2>
 800758c:	6921      	ldr	r1, [r4, #16]
 800758e:	464a      	mov	r2, r9
 8007590:	f7ff fed2 	bl	8007338 <memcpy>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800759a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	6126      	str	r6, [r4, #16]
 80075a2:	6165      	str	r5, [r4, #20]
 80075a4:	444e      	add	r6, r9
 80075a6:	eba5 0509 	sub.w	r5, r5, r9
 80075aa:	6026      	str	r6, [r4, #0]
 80075ac:	60a5      	str	r5, [r4, #8]
 80075ae:	463e      	mov	r6, r7
 80075b0:	42be      	cmp	r6, r7
 80075b2:	d900      	bls.n	80075b6 <__ssputs_r+0x72>
 80075b4:	463e      	mov	r6, r7
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	4632      	mov	r2, r6
 80075ba:	4641      	mov	r1, r8
 80075bc:	f000 faa8 	bl	8007b10 <memmove>
 80075c0:	68a3      	ldr	r3, [r4, #8]
 80075c2:	1b9b      	subs	r3, r3, r6
 80075c4:	60a3      	str	r3, [r4, #8]
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	4433      	add	r3, r6
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	2000      	movs	r0, #0
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	462a      	mov	r2, r5
 80075d4:	f000 fac6 	bl	8007b64 <_realloc_r>
 80075d8:	4606      	mov	r6, r0
 80075da:	2800      	cmp	r0, #0
 80075dc:	d1e0      	bne.n	80075a0 <__ssputs_r+0x5c>
 80075de:	6921      	ldr	r1, [r4, #16]
 80075e0:	4650      	mov	r0, sl
 80075e2:	f7ff feb7 	bl	8007354 <_free_r>
 80075e6:	230c      	movs	r3, #12
 80075e8:	f8ca 3000 	str.w	r3, [sl]
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	e7e9      	b.n	80075ce <__ssputs_r+0x8a>
	...

080075fc <_svfiprintf_r>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	4698      	mov	r8, r3
 8007602:	898b      	ldrh	r3, [r1, #12]
 8007604:	061b      	lsls	r3, r3, #24
 8007606:	b09d      	sub	sp, #116	@ 0x74
 8007608:	4607      	mov	r7, r0
 800760a:	460d      	mov	r5, r1
 800760c:	4614      	mov	r4, r2
 800760e:	d510      	bpl.n	8007632 <_svfiprintf_r+0x36>
 8007610:	690b      	ldr	r3, [r1, #16]
 8007612:	b973      	cbnz	r3, 8007632 <_svfiprintf_r+0x36>
 8007614:	2140      	movs	r1, #64	@ 0x40
 8007616:	f7ff ff09 	bl	800742c <_malloc_r>
 800761a:	6028      	str	r0, [r5, #0]
 800761c:	6128      	str	r0, [r5, #16]
 800761e:	b930      	cbnz	r0, 800762e <_svfiprintf_r+0x32>
 8007620:	230c      	movs	r3, #12
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	b01d      	add	sp, #116	@ 0x74
 800762a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762e:	2340      	movs	r3, #64	@ 0x40
 8007630:	616b      	str	r3, [r5, #20]
 8007632:	2300      	movs	r3, #0
 8007634:	9309      	str	r3, [sp, #36]	@ 0x24
 8007636:	2320      	movs	r3, #32
 8007638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800763c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007640:	2330      	movs	r3, #48	@ 0x30
 8007642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80077e0 <_svfiprintf_r+0x1e4>
 8007646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800764a:	f04f 0901 	mov.w	r9, #1
 800764e:	4623      	mov	r3, r4
 8007650:	469a      	mov	sl, r3
 8007652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007656:	b10a      	cbz	r2, 800765c <_svfiprintf_r+0x60>
 8007658:	2a25      	cmp	r2, #37	@ 0x25
 800765a:	d1f9      	bne.n	8007650 <_svfiprintf_r+0x54>
 800765c:	ebba 0b04 	subs.w	fp, sl, r4
 8007660:	d00b      	beq.n	800767a <_svfiprintf_r+0x7e>
 8007662:	465b      	mov	r3, fp
 8007664:	4622      	mov	r2, r4
 8007666:	4629      	mov	r1, r5
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff ff6b 	bl	8007544 <__ssputs_r>
 800766e:	3001      	adds	r0, #1
 8007670:	f000 80a7 	beq.w	80077c2 <_svfiprintf_r+0x1c6>
 8007674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007676:	445a      	add	r2, fp
 8007678:	9209      	str	r2, [sp, #36]	@ 0x24
 800767a:	f89a 3000 	ldrb.w	r3, [sl]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 809f 	beq.w	80077c2 <_svfiprintf_r+0x1c6>
 8007684:	2300      	movs	r3, #0
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800768e:	f10a 0a01 	add.w	sl, sl, #1
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	9307      	str	r3, [sp, #28]
 8007696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800769a:	931a      	str	r3, [sp, #104]	@ 0x68
 800769c:	4654      	mov	r4, sl
 800769e:	2205      	movs	r2, #5
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	484e      	ldr	r0, [pc, #312]	@ (80077e0 <_svfiprintf_r+0x1e4>)
 80076a6:	f7f8 fdd3 	bl	8000250 <memchr>
 80076aa:	9a04      	ldr	r2, [sp, #16]
 80076ac:	b9d8      	cbnz	r0, 80076e6 <_svfiprintf_r+0xea>
 80076ae:	06d0      	lsls	r0, r2, #27
 80076b0:	bf44      	itt	mi
 80076b2:	2320      	movmi	r3, #32
 80076b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b8:	0711      	lsls	r1, r2, #28
 80076ba:	bf44      	itt	mi
 80076bc:	232b      	movmi	r3, #43	@ 0x2b
 80076be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076c2:	f89a 3000 	ldrb.w	r3, [sl]
 80076c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c8:	d015      	beq.n	80076f6 <_svfiprintf_r+0xfa>
 80076ca:	9a07      	ldr	r2, [sp, #28]
 80076cc:	4654      	mov	r4, sl
 80076ce:	2000      	movs	r0, #0
 80076d0:	f04f 0c0a 	mov.w	ip, #10
 80076d4:	4621      	mov	r1, r4
 80076d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076da:	3b30      	subs	r3, #48	@ 0x30
 80076dc:	2b09      	cmp	r3, #9
 80076de:	d94b      	bls.n	8007778 <_svfiprintf_r+0x17c>
 80076e0:	b1b0      	cbz	r0, 8007710 <_svfiprintf_r+0x114>
 80076e2:	9207      	str	r2, [sp, #28]
 80076e4:	e014      	b.n	8007710 <_svfiprintf_r+0x114>
 80076e6:	eba0 0308 	sub.w	r3, r0, r8
 80076ea:	fa09 f303 	lsl.w	r3, r9, r3
 80076ee:	4313      	orrs	r3, r2
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	46a2      	mov	sl, r4
 80076f4:	e7d2      	b.n	800769c <_svfiprintf_r+0xa0>
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	1d19      	adds	r1, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	9103      	str	r1, [sp, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfbb      	ittet	lt
 8007702:	425b      	neglt	r3, r3
 8007704:	f042 0202 	orrlt.w	r2, r2, #2
 8007708:	9307      	strge	r3, [sp, #28]
 800770a:	9307      	strlt	r3, [sp, #28]
 800770c:	bfb8      	it	lt
 800770e:	9204      	strlt	r2, [sp, #16]
 8007710:	7823      	ldrb	r3, [r4, #0]
 8007712:	2b2e      	cmp	r3, #46	@ 0x2e
 8007714:	d10a      	bne.n	800772c <_svfiprintf_r+0x130>
 8007716:	7863      	ldrb	r3, [r4, #1]
 8007718:	2b2a      	cmp	r3, #42	@ 0x2a
 800771a:	d132      	bne.n	8007782 <_svfiprintf_r+0x186>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	9203      	str	r2, [sp, #12]
 8007724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007728:	3402      	adds	r4, #2
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80077f0 <_svfiprintf_r+0x1f4>
 8007730:	7821      	ldrb	r1, [r4, #0]
 8007732:	2203      	movs	r2, #3
 8007734:	4650      	mov	r0, sl
 8007736:	f7f8 fd8b 	bl	8000250 <memchr>
 800773a:	b138      	cbz	r0, 800774c <_svfiprintf_r+0x150>
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	eba0 000a 	sub.w	r0, r0, sl
 8007742:	2240      	movs	r2, #64	@ 0x40
 8007744:	4082      	lsls	r2, r0
 8007746:	4313      	orrs	r3, r2
 8007748:	3401      	adds	r4, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	4824      	ldr	r0, [pc, #144]	@ (80077e4 <_svfiprintf_r+0x1e8>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	f7f8 fd7a 	bl	8000250 <memchr>
 800775c:	2800      	cmp	r0, #0
 800775e:	d036      	beq.n	80077ce <_svfiprintf_r+0x1d2>
 8007760:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <_svfiprintf_r+0x1ec>)
 8007762:	bb1b      	cbnz	r3, 80077ac <_svfiprintf_r+0x1b0>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	3307      	adds	r3, #7
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007772:	4433      	add	r3, r6
 8007774:	9309      	str	r3, [sp, #36]	@ 0x24
 8007776:	e76a      	b.n	800764e <_svfiprintf_r+0x52>
 8007778:	fb0c 3202 	mla	r2, ip, r2, r3
 800777c:	460c      	mov	r4, r1
 800777e:	2001      	movs	r0, #1
 8007780:	e7a8      	b.n	80076d4 <_svfiprintf_r+0xd8>
 8007782:	2300      	movs	r3, #0
 8007784:	3401      	adds	r4, #1
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0c0a 	mov.w	ip, #10
 800778e:	4620      	mov	r0, r4
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	@ 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_svfiprintf_r+0x1a6>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c6      	beq.n	800772c <_svfiprintf_r+0x130>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c4      	b.n	800772c <_svfiprintf_r+0x130>
 80077a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a6:	4604      	mov	r4, r0
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7f0      	b.n	800778e <_svfiprintf_r+0x192>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <_svfiprintf_r+0x1f0>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4638      	mov	r0, r7
 80077b8:	f3af 8000 	nop.w
 80077bc:	1c42      	adds	r2, r0, #1
 80077be:	4606      	mov	r6, r0
 80077c0:	d1d6      	bne.n	8007770 <_svfiprintf_r+0x174>
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	065b      	lsls	r3, r3, #25
 80077c6:	f53f af2d 	bmi.w	8007624 <_svfiprintf_r+0x28>
 80077ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077cc:	e72c      	b.n	8007628 <_svfiprintf_r+0x2c>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <_svfiprintf_r+0x1f0>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4638      	mov	r0, r7
 80077da:	f000 f879 	bl	80078d0 <_printf_i>
 80077de:	e7ed      	b.n	80077bc <_svfiprintf_r+0x1c0>
 80077e0:	08007d0c 	.word	0x08007d0c
 80077e4:	08007d16 	.word	0x08007d16
 80077e8:	00000000 	.word	0x00000000
 80077ec:	08007545 	.word	0x08007545
 80077f0:	08007d12 	.word	0x08007d12

080077f4 <_printf_common>:
 80077f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	4616      	mov	r6, r2
 80077fa:	4698      	mov	r8, r3
 80077fc:	688a      	ldr	r2, [r1, #8]
 80077fe:	690b      	ldr	r3, [r1, #16]
 8007800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007804:	4293      	cmp	r3, r2
 8007806:	bfb8      	it	lt
 8007808:	4613      	movlt	r3, r2
 800780a:	6033      	str	r3, [r6, #0]
 800780c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007810:	4607      	mov	r7, r0
 8007812:	460c      	mov	r4, r1
 8007814:	b10a      	cbz	r2, 800781a <_printf_common+0x26>
 8007816:	3301      	adds	r3, #1
 8007818:	6033      	str	r3, [r6, #0]
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	0699      	lsls	r1, r3, #26
 800781e:	bf42      	ittt	mi
 8007820:	6833      	ldrmi	r3, [r6, #0]
 8007822:	3302      	addmi	r3, #2
 8007824:	6033      	strmi	r3, [r6, #0]
 8007826:	6825      	ldr	r5, [r4, #0]
 8007828:	f015 0506 	ands.w	r5, r5, #6
 800782c:	d106      	bne.n	800783c <_printf_common+0x48>
 800782e:	f104 0a19 	add.w	sl, r4, #25
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	6832      	ldr	r2, [r6, #0]
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	42ab      	cmp	r3, r5
 800783a:	dc26      	bgt.n	800788a <_printf_common+0x96>
 800783c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	3b00      	subs	r3, #0
 8007844:	bf18      	it	ne
 8007846:	2301      	movne	r3, #1
 8007848:	0692      	lsls	r2, r2, #26
 800784a:	d42b      	bmi.n	80078a4 <_printf_common+0xb0>
 800784c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007850:	4641      	mov	r1, r8
 8007852:	4638      	mov	r0, r7
 8007854:	47c8      	blx	r9
 8007856:	3001      	adds	r0, #1
 8007858:	d01e      	beq.n	8007898 <_printf_common+0xa4>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	6922      	ldr	r2, [r4, #16]
 800785e:	f003 0306 	and.w	r3, r3, #6
 8007862:	2b04      	cmp	r3, #4
 8007864:	bf02      	ittt	eq
 8007866:	68e5      	ldreq	r5, [r4, #12]
 8007868:	6833      	ldreq	r3, [r6, #0]
 800786a:	1aed      	subeq	r5, r5, r3
 800786c:	68a3      	ldr	r3, [r4, #8]
 800786e:	bf0c      	ite	eq
 8007870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007874:	2500      	movne	r5, #0
 8007876:	4293      	cmp	r3, r2
 8007878:	bfc4      	itt	gt
 800787a:	1a9b      	subgt	r3, r3, r2
 800787c:	18ed      	addgt	r5, r5, r3
 800787e:	2600      	movs	r6, #0
 8007880:	341a      	adds	r4, #26
 8007882:	42b5      	cmp	r5, r6
 8007884:	d11a      	bne.n	80078bc <_printf_common+0xc8>
 8007886:	2000      	movs	r0, #0
 8007888:	e008      	b.n	800789c <_printf_common+0xa8>
 800788a:	2301      	movs	r3, #1
 800788c:	4652      	mov	r2, sl
 800788e:	4641      	mov	r1, r8
 8007890:	4638      	mov	r0, r7
 8007892:	47c8      	blx	r9
 8007894:	3001      	adds	r0, #1
 8007896:	d103      	bne.n	80078a0 <_printf_common+0xac>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	3501      	adds	r5, #1
 80078a2:	e7c6      	b.n	8007832 <_printf_common+0x3e>
 80078a4:	18e1      	adds	r1, r4, r3
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	2030      	movs	r0, #48	@ 0x30
 80078aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078ae:	4422      	add	r2, r4
 80078b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078b8:	3302      	adds	r3, #2
 80078ba:	e7c7      	b.n	800784c <_printf_common+0x58>
 80078bc:	2301      	movs	r3, #1
 80078be:	4622      	mov	r2, r4
 80078c0:	4641      	mov	r1, r8
 80078c2:	4638      	mov	r0, r7
 80078c4:	47c8      	blx	r9
 80078c6:	3001      	adds	r0, #1
 80078c8:	d0e6      	beq.n	8007898 <_printf_common+0xa4>
 80078ca:	3601      	adds	r6, #1
 80078cc:	e7d9      	b.n	8007882 <_printf_common+0x8e>
	...

080078d0 <_printf_i>:
 80078d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	7e0f      	ldrb	r7, [r1, #24]
 80078d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078d8:	2f78      	cmp	r7, #120	@ 0x78
 80078da:	4691      	mov	r9, r2
 80078dc:	4680      	mov	r8, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	469a      	mov	sl, r3
 80078e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078e6:	d807      	bhi.n	80078f8 <_printf_i+0x28>
 80078e8:	2f62      	cmp	r7, #98	@ 0x62
 80078ea:	d80a      	bhi.n	8007902 <_printf_i+0x32>
 80078ec:	2f00      	cmp	r7, #0
 80078ee:	f000 80d2 	beq.w	8007a96 <_printf_i+0x1c6>
 80078f2:	2f58      	cmp	r7, #88	@ 0x58
 80078f4:	f000 80b9 	beq.w	8007a6a <_printf_i+0x19a>
 80078f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007900:	e03a      	b.n	8007978 <_printf_i+0xa8>
 8007902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007906:	2b15      	cmp	r3, #21
 8007908:	d8f6      	bhi.n	80078f8 <_printf_i+0x28>
 800790a:	a101      	add	r1, pc, #4	@ (adr r1, 8007910 <_printf_i+0x40>)
 800790c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007910:	08007969 	.word	0x08007969
 8007914:	0800797d 	.word	0x0800797d
 8007918:	080078f9 	.word	0x080078f9
 800791c:	080078f9 	.word	0x080078f9
 8007920:	080078f9 	.word	0x080078f9
 8007924:	080078f9 	.word	0x080078f9
 8007928:	0800797d 	.word	0x0800797d
 800792c:	080078f9 	.word	0x080078f9
 8007930:	080078f9 	.word	0x080078f9
 8007934:	080078f9 	.word	0x080078f9
 8007938:	080078f9 	.word	0x080078f9
 800793c:	08007a7d 	.word	0x08007a7d
 8007940:	080079a7 	.word	0x080079a7
 8007944:	08007a37 	.word	0x08007a37
 8007948:	080078f9 	.word	0x080078f9
 800794c:	080078f9 	.word	0x080078f9
 8007950:	08007a9f 	.word	0x08007a9f
 8007954:	080078f9 	.word	0x080078f9
 8007958:	080079a7 	.word	0x080079a7
 800795c:	080078f9 	.word	0x080078f9
 8007960:	080078f9 	.word	0x080078f9
 8007964:	08007a3f 	.word	0x08007a3f
 8007968:	6833      	ldr	r3, [r6, #0]
 800796a:	1d1a      	adds	r2, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6032      	str	r2, [r6, #0]
 8007970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007978:	2301      	movs	r3, #1
 800797a:	e09d      	b.n	8007ab8 <_printf_i+0x1e8>
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	6820      	ldr	r0, [r4, #0]
 8007980:	1d19      	adds	r1, r3, #4
 8007982:	6031      	str	r1, [r6, #0]
 8007984:	0606      	lsls	r6, r0, #24
 8007986:	d501      	bpl.n	800798c <_printf_i+0xbc>
 8007988:	681d      	ldr	r5, [r3, #0]
 800798a:	e003      	b.n	8007994 <_printf_i+0xc4>
 800798c:	0645      	lsls	r5, r0, #25
 800798e:	d5fb      	bpl.n	8007988 <_printf_i+0xb8>
 8007990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007994:	2d00      	cmp	r5, #0
 8007996:	da03      	bge.n	80079a0 <_printf_i+0xd0>
 8007998:	232d      	movs	r3, #45	@ 0x2d
 800799a:	426d      	negs	r5, r5
 800799c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a0:	4859      	ldr	r0, [pc, #356]	@ (8007b08 <_printf_i+0x238>)
 80079a2:	230a      	movs	r3, #10
 80079a4:	e011      	b.n	80079ca <_printf_i+0xfa>
 80079a6:	6821      	ldr	r1, [r4, #0]
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	0608      	lsls	r0, r1, #24
 80079ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80079b0:	d402      	bmi.n	80079b8 <_printf_i+0xe8>
 80079b2:	0649      	lsls	r1, r1, #25
 80079b4:	bf48      	it	mi
 80079b6:	b2ad      	uxthmi	r5, r5
 80079b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80079ba:	4853      	ldr	r0, [pc, #332]	@ (8007b08 <_printf_i+0x238>)
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	bf14      	ite	ne
 80079c0:	230a      	movne	r3, #10
 80079c2:	2308      	moveq	r3, #8
 80079c4:	2100      	movs	r1, #0
 80079c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079ca:	6866      	ldr	r6, [r4, #4]
 80079cc:	60a6      	str	r6, [r4, #8]
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	bfa2      	ittt	ge
 80079d2:	6821      	ldrge	r1, [r4, #0]
 80079d4:	f021 0104 	bicge.w	r1, r1, #4
 80079d8:	6021      	strge	r1, [r4, #0]
 80079da:	b90d      	cbnz	r5, 80079e0 <_printf_i+0x110>
 80079dc:	2e00      	cmp	r6, #0
 80079de:	d04b      	beq.n	8007a78 <_printf_i+0x1a8>
 80079e0:	4616      	mov	r6, r2
 80079e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079e6:	fb03 5711 	mls	r7, r3, r1, r5
 80079ea:	5dc7      	ldrb	r7, [r0, r7]
 80079ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079f0:	462f      	mov	r7, r5
 80079f2:	42bb      	cmp	r3, r7
 80079f4:	460d      	mov	r5, r1
 80079f6:	d9f4      	bls.n	80079e2 <_printf_i+0x112>
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d10b      	bne.n	8007a14 <_printf_i+0x144>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	07df      	lsls	r7, r3, #31
 8007a00:	d508      	bpl.n	8007a14 <_printf_i+0x144>
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	6861      	ldr	r1, [r4, #4]
 8007a06:	4299      	cmp	r1, r3
 8007a08:	bfde      	ittt	le
 8007a0a:	2330      	movle	r3, #48	@ 0x30
 8007a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a14:	1b92      	subs	r2, r2, r6
 8007a16:	6122      	str	r2, [r4, #16]
 8007a18:	f8cd a000 	str.w	sl, [sp]
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	aa03      	add	r2, sp, #12
 8007a20:	4621      	mov	r1, r4
 8007a22:	4640      	mov	r0, r8
 8007a24:	f7ff fee6 	bl	80077f4 <_printf_common>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d14a      	bne.n	8007ac2 <_printf_i+0x1f2>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	b004      	add	sp, #16
 8007a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	f043 0320 	orr.w	r3, r3, #32
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	4833      	ldr	r0, [pc, #204]	@ (8007b0c <_printf_i+0x23c>)
 8007a40:	2778      	movs	r7, #120	@ 0x78
 8007a42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	6831      	ldr	r1, [r6, #0]
 8007a4a:	061f      	lsls	r7, r3, #24
 8007a4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a50:	d402      	bmi.n	8007a58 <_printf_i+0x188>
 8007a52:	065f      	lsls	r7, r3, #25
 8007a54:	bf48      	it	mi
 8007a56:	b2ad      	uxthmi	r5, r5
 8007a58:	6031      	str	r1, [r6, #0]
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	bf44      	itt	mi
 8007a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a62:	6023      	strmi	r3, [r4, #0]
 8007a64:	b11d      	cbz	r5, 8007a6e <_printf_i+0x19e>
 8007a66:	2310      	movs	r3, #16
 8007a68:	e7ac      	b.n	80079c4 <_printf_i+0xf4>
 8007a6a:	4827      	ldr	r0, [pc, #156]	@ (8007b08 <_printf_i+0x238>)
 8007a6c:	e7e9      	b.n	8007a42 <_printf_i+0x172>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	f023 0320 	bic.w	r3, r3, #32
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	e7f6      	b.n	8007a66 <_printf_i+0x196>
 8007a78:	4616      	mov	r6, r2
 8007a7a:	e7bd      	b.n	80079f8 <_printf_i+0x128>
 8007a7c:	6833      	ldr	r3, [r6, #0]
 8007a7e:	6825      	ldr	r5, [r4, #0]
 8007a80:	6961      	ldr	r1, [r4, #20]
 8007a82:	1d18      	adds	r0, r3, #4
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	062e      	lsls	r6, r5, #24
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	d501      	bpl.n	8007a90 <_printf_i+0x1c0>
 8007a8c:	6019      	str	r1, [r3, #0]
 8007a8e:	e002      	b.n	8007a96 <_printf_i+0x1c6>
 8007a90:	0668      	lsls	r0, r5, #25
 8007a92:	d5fb      	bpl.n	8007a8c <_printf_i+0x1bc>
 8007a94:	8019      	strh	r1, [r3, #0]
 8007a96:	2300      	movs	r3, #0
 8007a98:	6123      	str	r3, [r4, #16]
 8007a9a:	4616      	mov	r6, r2
 8007a9c:	e7bc      	b.n	8007a18 <_printf_i+0x148>
 8007a9e:	6833      	ldr	r3, [r6, #0]
 8007aa0:	1d1a      	adds	r2, r3, #4
 8007aa2:	6032      	str	r2, [r6, #0]
 8007aa4:	681e      	ldr	r6, [r3, #0]
 8007aa6:	6862      	ldr	r2, [r4, #4]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7f8 fbd0 	bl	8000250 <memchr>
 8007ab0:	b108      	cbz	r0, 8007ab6 <_printf_i+0x1e6>
 8007ab2:	1b80      	subs	r0, r0, r6
 8007ab4:	6060      	str	r0, [r4, #4]
 8007ab6:	6863      	ldr	r3, [r4, #4]
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	2300      	movs	r3, #0
 8007abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ac0:	e7aa      	b.n	8007a18 <_printf_i+0x148>
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	4640      	mov	r0, r8
 8007aca:	47d0      	blx	sl
 8007acc:	3001      	adds	r0, #1
 8007ace:	d0ad      	beq.n	8007a2c <_printf_i+0x15c>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	079b      	lsls	r3, r3, #30
 8007ad4:	d413      	bmi.n	8007afe <_printf_i+0x22e>
 8007ad6:	68e0      	ldr	r0, [r4, #12]
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	4298      	cmp	r0, r3
 8007adc:	bfb8      	it	lt
 8007ade:	4618      	movlt	r0, r3
 8007ae0:	e7a6      	b.n	8007a30 <_printf_i+0x160>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	4640      	mov	r0, r8
 8007aea:	47d0      	blx	sl
 8007aec:	3001      	adds	r0, #1
 8007aee:	d09d      	beq.n	8007a2c <_printf_i+0x15c>
 8007af0:	3501      	adds	r5, #1
 8007af2:	68e3      	ldr	r3, [r4, #12]
 8007af4:	9903      	ldr	r1, [sp, #12]
 8007af6:	1a5b      	subs	r3, r3, r1
 8007af8:	42ab      	cmp	r3, r5
 8007afa:	dcf2      	bgt.n	8007ae2 <_printf_i+0x212>
 8007afc:	e7eb      	b.n	8007ad6 <_printf_i+0x206>
 8007afe:	2500      	movs	r5, #0
 8007b00:	f104 0619 	add.w	r6, r4, #25
 8007b04:	e7f5      	b.n	8007af2 <_printf_i+0x222>
 8007b06:	bf00      	nop
 8007b08:	08007d1d 	.word	0x08007d1d
 8007b0c:	08007d2e 	.word	0x08007d2e

08007b10 <memmove>:
 8007b10:	4288      	cmp	r0, r1
 8007b12:	b510      	push	{r4, lr}
 8007b14:	eb01 0402 	add.w	r4, r1, r2
 8007b18:	d902      	bls.n	8007b20 <memmove+0x10>
 8007b1a:	4284      	cmp	r4, r0
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	d807      	bhi.n	8007b30 <memmove+0x20>
 8007b20:	1e43      	subs	r3, r0, #1
 8007b22:	42a1      	cmp	r1, r4
 8007b24:	d008      	beq.n	8007b38 <memmove+0x28>
 8007b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b2e:	e7f8      	b.n	8007b22 <memmove+0x12>
 8007b30:	4402      	add	r2, r0
 8007b32:	4601      	mov	r1, r0
 8007b34:	428a      	cmp	r2, r1
 8007b36:	d100      	bne.n	8007b3a <memmove+0x2a>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b42:	e7f7      	b.n	8007b34 <memmove+0x24>

08007b44 <_sbrk_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d06      	ldr	r5, [pc, #24]	@ (8007b60 <_sbrk_r+0x1c>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	f7f9 fa48 	bl	8000fe4 <_sbrk>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_sbrk_r+0x1a>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_sbrk_r+0x1a>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	200042bc 	.word	0x200042bc

08007b64 <_realloc_r>:
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4615      	mov	r5, r2
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b921      	cbnz	r1, 8007b7a <_realloc_r+0x16>
 8007b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b74:	4611      	mov	r1, r2
 8007b76:	f7ff bc59 	b.w	800742c <_malloc_r>
 8007b7a:	b92a      	cbnz	r2, 8007b88 <_realloc_r+0x24>
 8007b7c:	f7ff fbea 	bl	8007354 <_free_r>
 8007b80:	2400      	movs	r4, #0
 8007b82:	4620      	mov	r0, r4
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	f000 f81a 	bl	8007bc0 <_malloc_usable_size_r>
 8007b8c:	4285      	cmp	r5, r0
 8007b8e:	4606      	mov	r6, r0
 8007b90:	d802      	bhi.n	8007b98 <_realloc_r+0x34>
 8007b92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b96:	d8f4      	bhi.n	8007b82 <_realloc_r+0x1e>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7ff fc46 	bl	800742c <_malloc_r>
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0ec      	beq.n	8007b80 <_realloc_r+0x1c>
 8007ba6:	42b5      	cmp	r5, r6
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4621      	mov	r1, r4
 8007bac:	bf28      	it	cs
 8007bae:	4632      	movcs	r2, r6
 8007bb0:	f7ff fbc2 	bl	8007338 <memcpy>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff fbcc 	bl	8007354 <_free_r>
 8007bbc:	463c      	mov	r4, r7
 8007bbe:	e7e0      	b.n	8007b82 <_realloc_r+0x1e>

08007bc0 <_malloc_usable_size_r>:
 8007bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc4:	1f18      	subs	r0, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfbc      	itt	lt
 8007bca:	580b      	ldrlt	r3, [r1, r0]
 8007bcc:	18c0      	addlt	r0, r0, r3
 8007bce:	4770      	bx	lr

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
